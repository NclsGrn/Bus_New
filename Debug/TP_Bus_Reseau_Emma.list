
TP_Bus_Reseau_Emma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005bf4  08005bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d30  08005d30  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d30  08005d30  00015d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d38  08005d38  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d38  08005d38  00015d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000007c  08005dbc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08005dbc  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186dc  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003079  00000000  00000000  00038788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0003b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  0003c710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000442f  00000000  00000000  0003d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127fe  00000000  00000000  0004190f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee910  00000000  00000000  0005410d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00142a1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044bc  00000000  00000000  00142a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bdc 	.word	0x08005bdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005bdc 	.word	0x08005bdc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_CAN1_Init+0x64>)
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <MX_CAN1_Init+0x68>)
 8000570:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <MX_CAN1_Init+0x64>)
 8000574:	2210      	movs	r2, #16
 8000576:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_CAN1_Init+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_CAN1_Init+0x64>)
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_CAN1_Init+0x64>)
 8000586:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800058a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_CAN1_Init+0x64>)
 800058e:	2200      	movs	r2, #0
 8000590:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_CAN1_Init+0x64>)
 8000594:	2200      	movs	r2, #0
 8000596:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_CAN1_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_CAN1_Init+0x64>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_CAN1_Init+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <MX_CAN1_Init+0x64>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_CAN1_Init+0x64>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_CAN1_Init+0x64>)
 80005b8:	f000 fdaa 	bl	8001110 <HAL_CAN_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80005c2:	f000 fa83 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000a8 	.word	0x200000a8
 80005d0:	40006400 	.word	0x40006400

080005d4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a18      	ldr	r2, [pc, #96]	; (8000654 <HAL_CAN_MspInit+0x80>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d129      	bne.n	800064a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <HAL_CAN_MspInit+0x84>)
 80005f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fa:	4a17      	ldr	r2, [pc, #92]	; (8000658 <HAL_CAN_MspInit+0x84>)
 80005fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000600:	6593      	str	r3, [r2, #88]	; 0x58
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <HAL_CAN_MspInit+0x84>)
 8000604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_CAN_MspInit+0x84>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a11      	ldr	r2, [pc, #68]	; (8000658 <HAL_CAN_MspInit+0x84>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <HAL_CAN_MspInit+0x84>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000626:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800062a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000638:	2309      	movs	r3, #9
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000646:	f000 ffef 	bl	8001628 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800064a:	bf00      	nop
 800064c:	3728      	adds	r7, #40	; 0x28
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40006400 	.word	0x40006400
 8000658:	40021000 	.word	0x40021000

0800065c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b28      	ldr	r3, [pc, #160]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a24      	ldr	r2, [pc, #144]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_GPIO_Init+0xc4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006da:	f001 f94f 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_GPIO_Init+0xc8>)
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_GPIO_Init+0xcc>)
 80006f4:	f000 ff98 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006f8:	2320      	movs	r3, #32
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f000 ff89 	bl	8001628 <HAL_GPIO_Init>

}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000
 8000724:	10210000 	.word	0x10210000
 8000728:	48000800 	.word	0x48000800

0800072c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <MX_I2C1_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <MX_I2C1_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_I2C1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <MX_I2C1_Init+0x74>)
 8000768:	f001 f920 	bl	80019ac <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 f9ab 	bl	8000acc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	; (80007a0 <MX_I2C1_Init+0x74>)
 800077a:	f001 fd8b 	bl	8002294 <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 f9a2 	bl	8000acc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_I2C1_Init+0x74>)
 800078c:	f001 fdcd 	bl	800232a <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 f999 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000d0 	.word	0x200000d0
 80007a4:	40005400 	.word	0x40005400
 80007a8:	10909cec 	.word	0x10909cec

080007ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b0ac      	sub	sp, #176	; 0xb0
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2288      	movs	r2, #136	; 0x88
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f004 fa31 	bl	8004c34 <memset>
  if(i2cHandle->Instance==I2C1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a25      	ldr	r2, [pc, #148]	; (800086c <HAL_I2C_MspInit+0xc0>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d143      	bne.n	8000864 <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007dc:	2340      	movs	r3, #64	; 0x40
 80007de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fc3b 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007f4:	f000 f96a 	bl	8000acc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <HAL_I2C_MspInit+0xc4>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fc:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <HAL_I2C_MspInit+0xc4>)
 80007fe:	f043 0302 	orr.w	r3, r3, #2
 8000802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <HAL_I2C_MspInit+0xc4>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000810:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000818:	2312      	movs	r3, #18
 800081a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800082a:	2304      	movs	r3, #4
 800082c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000834:	4619      	mov	r1, r3
 8000836:	480f      	ldr	r0, [pc, #60]	; (8000874 <HAL_I2C_MspInit+0xc8>)
 8000838:	f000 fef6 	bl	8001628 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_I2C_MspInit+0xc4>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <HAL_I2C_MspInit+0xc4>)
 8000842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000846:	6593      	str	r3, [r2, #88]	; 0x58
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_I2C_MspInit+0xc4>)
 800084a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	201f      	movs	r0, #31
 800085a:	f000 fe30 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800085e:	201f      	movs	r0, #31
 8000860:	f000 fe49 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000864:	bf00      	nop
 8000866:	37b0      	adds	r7, #176	; 0xb0
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40005400 	.word	0x40005400
 8000870:	40021000 	.word	0x40021000
 8000874:	48000400 	.word	0x48000400

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087e:	f000 fba7 	bl	8000fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000882:	f000 f8bb 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f7ff fee9 	bl	800065c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800088a:	f000 fa9f 	bl	8000dcc <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800088e:	f7ff fe6b 	bl	8000568 <MX_CAN1_Init>
  MX_UART4_Init();
 8000892:	f000 fa6b 	bl	8000d6c <MX_UART4_Init>
  MX_I2C1_Init();
 8000896:	f7ff ff49 	bl	800072c <MX_I2C1_Init>
  //printf("\r\nChecking for BMP280\r\n");
  /*BMP280_check();
 	    printf("\r\nConfigure BMP280\r\n");
 	    BMP280_init(); */
  /* USER CODE BEGIN 2 */
  printf("Starting...\r\n");
 800089a:	4845      	ldr	r0, [pc, #276]	; (80009b0 <main+0x138>)
 800089c:	f004 fb02 	bl	8004ea4 <puts>
  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 1);
 80008a0:	2201      	movs	r2, #1
 80008a2:	4944      	ldr	r1, [pc, #272]	; (80009b4 <main+0x13c>)
 80008a4:	4844      	ldr	r0, [pc, #272]	; (80009b8 <main+0x140>)
 80008a6:	f003 f97b 	bl	8003ba0 <HAL_UART_Receive_IT>

  //identification du BMP280
  HAL_I2C_Master_Transmit(&hi2c1, 0x77<<1, i2c_t_buffer, 1, HAL_MAX_DELAY);
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2301      	movs	r3, #1
 80008b2:	4a42      	ldr	r2, [pc, #264]	; (80009bc <main+0x144>)
 80008b4:	21ee      	movs	r1, #238	; 0xee
 80008b6:	4842      	ldr	r0, [pc, #264]	; (80009c0 <main+0x148>)
 80008b8:	f001 f908 	bl	8001acc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, 0x77<<1, i2c_r_buffer, 1, HAL_MAX_DELAY);
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2301      	movs	r3, #1
 80008c4:	4a3f      	ldr	r2, [pc, #252]	; (80009c4 <main+0x14c>)
 80008c6:	21ee      	movs	r1, #238	; 0xee
 80008c8:	483d      	ldr	r0, [pc, #244]	; (80009c0 <main+0x148>)
 80008ca:	f001 f9f3 	bl	8001cb4 <HAL_I2C_Master_Receive>
  printf("%x \r\n", i2c_r_buffer[0]);
 80008ce:	4b3d      	ldr	r3, [pc, #244]	; (80009c4 <main+0x14c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	4619      	mov	r1, r3
 80008d4:	483c      	ldr	r0, [pc, #240]	; (80009c8 <main+0x150>)
 80008d6:	f004 fa5f 	bl	8004d98 <iprintf>

  //configuration du BMP280
  HAL_I2C_Master_Transmit(&hi2c1, 0x77<<1, i2c_t_conf_buffer, 2, HAL_MAX_DELAY);
 80008da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2302      	movs	r3, #2
 80008e2:	4a3a      	ldr	r2, [pc, #232]	; (80009cc <main+0x154>)
 80008e4:	21ee      	movs	r1, #238	; 0xee
 80008e6:	4836      	ldr	r0, [pc, #216]	; (80009c0 <main+0x148>)
 80008e8:	f001 f8f0 	bl	8001acc <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, 0x77<<1, i2c_r_conf_buffer, 1, HAL_MAX_DELAY);
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	4a36      	ldr	r2, [pc, #216]	; (80009d0 <main+0x158>)
 80008f6:	21ee      	movs	r1, #238	; 0xee
 80008f8:	4831      	ldr	r0, [pc, #196]	; (80009c0 <main+0x148>)
 80008fa:	f001 f9db 	bl	8001cb4 <HAL_I2C_Master_Receive>
  printf("%x \r\n", i2c_r_conf_buffer[0]);
 80008fe:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <main+0x158>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	4619      	mov	r1, r3
 8000904:	4830      	ldr	r0, [pc, #192]	; (80009c8 <main+0x150>)
 8000906:	f004 fa47 	bl	8004d98 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //echo début
	  if(it_uart==1){
 800090a:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <main+0x15c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d10c      	bne.n	800092c <main+0xb4>
		  } else {
			  uart_tx_buffer[1] = uart_rx_buffer[1];
			  HAL_UART_Transmit(&huart2, &uart_tx_buffer, 1, HAL_MAX_DELAY);
		  //HAL_UART_RxCpltCallback(&huart2);
		  }*/
		  uart_tx_buffer[0] = uart_rx_buffer[0];
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <main+0x13c>)
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <main+0x160>)
 8000918:	701a      	strb	r2, [r3, #0]
		  printf("Lettre = %c \r\n", uart_tx_buffer[0]);
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <main+0x160>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4619      	mov	r1, r3
 8000920:	482e      	ldr	r0, [pc, #184]	; (80009dc <main+0x164>)
 8000922:	f004 fa39 	bl	8004d98 <iprintf>
		  it_uart = 0;
 8000926:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <main+0x15c>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
		  //echo fin
		  }


	  //Affichage de la temp et de la press non compensés
	  HAL_I2C_Master_Transmit(&hi2c1, 0x77<<1, i2c_t_data_buffer, 1, 50);
 800092c:	2332      	movs	r3, #50	; 0x32
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	2301      	movs	r3, #1
 8000932:	4a2b      	ldr	r2, [pc, #172]	; (80009e0 <main+0x168>)
 8000934:	21ee      	movs	r1, #238	; 0xee
 8000936:	4822      	ldr	r0, [pc, #136]	; (80009c0 <main+0x148>)
 8000938:	f001 f8c8 	bl	8001acc <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, 0x77<<1, i2c_r_data_buffer, 6, 50);
 800093c:	2332      	movs	r3, #50	; 0x32
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2306      	movs	r3, #6
 8000942:	4a28      	ldr	r2, [pc, #160]	; (80009e4 <main+0x16c>)
 8000944:	21ee      	movs	r1, #238	; 0xee
 8000946:	481e      	ldr	r0, [pc, #120]	; (80009c0 <main+0x148>)
 8000948:	f001 f9b4 	bl	8001cb4 <HAL_I2C_Master_Receive>
	  pres = i2c_r_data_buffer[0]<<12 | i2c_r_data_buffer[1]<<4 | i2c_r_data_buffer[2]>>4;
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <main+0x16c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	031a      	lsls	r2, r3, #12
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <main+0x16c>)
 8000954:	785b      	ldrb	r3, [r3, #1]
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	4313      	orrs	r3, r2
 800095a:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <main+0x16c>)
 800095c:	7892      	ldrb	r2, [r2, #2]
 800095e:	0912      	lsrs	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	4313      	orrs	r3, r2
 8000964:	461a      	mov	r2, r3
 8000966:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <main+0x170>)
 8000968:	601a      	str	r2, [r3, #0]
	  temp = i2c_r_data_buffer[3]<<12 | i2c_r_data_buffer[4]<<4 | i2c_r_data_buffer[5]>>4;
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <main+0x16c>)
 800096c:	78db      	ldrb	r3, [r3, #3]
 800096e:	031a      	lsls	r2, r3, #12
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <main+0x16c>)
 8000972:	791b      	ldrb	r3, [r3, #4]
 8000974:	011b      	lsls	r3, r3, #4
 8000976:	4313      	orrs	r3, r2
 8000978:	4a1a      	ldr	r2, [pc, #104]	; (80009e4 <main+0x16c>)
 800097a:	7952      	ldrb	r2, [r2, #5]
 800097c:	0912      	lsrs	r2, r2, #4
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	4313      	orrs	r3, r2
 8000982:	461a      	mov	r2, r3
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <main+0x174>)
 8000986:	601a      	str	r2, [r3, #0]
	  printf("Debut \r\n");
 8000988:	4819      	ldr	r0, [pc, #100]	; (80009f0 <main+0x178>)
 800098a:	f004 fa8b 	bl	8004ea4 <puts>
	  printf("Pression : %x et Temperature %x \r\n", pres, temp);
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <main+0x170>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a16      	ldr	r2, [pc, #88]	; (80009ec <main+0x174>)
 8000994:	6812      	ldr	r2, [r2, #0]
 8000996:	4619      	mov	r1, r3
 8000998:	4816      	ldr	r0, [pc, #88]	; (80009f4 <main+0x17c>)
 800099a:	f004 f9fd 	bl	8004d98 <iprintf>
	  printf("Fin \r\n");
 800099e:	4816      	ldr	r0, [pc, #88]	; (80009f8 <main+0x180>)
 80009a0:	f004 fa80 	bl	8004ea4 <puts>
	  HAL_Delay(5000);
 80009a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80009a8:	f000 fb8e 	bl	80010c8 <HAL_Delay>
	  if(it_uart==1){
 80009ac:	e7ad      	b.n	800090a <main+0x92>
 80009ae:	bf00      	nop
 80009b0:	08005bf4 	.word	0x08005bf4
 80009b4:	20000174 	.word	0x20000174
 80009b8:	20000238 	.word	0x20000238
 80009bc:	20000000 	.word	0x20000000
 80009c0:	200000d0 	.word	0x200000d0
 80009c4:	20000170 	.word	0x20000170
 80009c8:	08005c04 	.word	0x08005c04
 80009cc:	20000004 	.word	0x20000004
 80009d0:	20000168 	.word	0x20000168
 80009d4:	20000098 	.word	0x20000098
 80009d8:	20000120 	.word	0x20000120
 80009dc:	08005c0c 	.word	0x08005c0c
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000160 	.word	0x20000160
 80009e8:	2000011c 	.word	0x2000011c
 80009ec:	2000016c 	.word	0x2000016c
 80009f0:	08005c1c 	.word	0x08005c1c
 80009f4:	08005c24 	.word	0x08005c24
 80009f8:	08005c48 	.word	0x08005c48

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b096      	sub	sp, #88	; 0x58
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	2244      	movs	r2, #68	; 0x44
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f004 f912 	bl	8004c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	463b      	mov	r3, r7
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a22:	f001 fcdd 	bl	80023e0 <HAL_PWREx_ControlVoltageScaling>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a2c:	f000 f84e 	bl	8000acc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a30:	2302      	movs	r3, #2
 8000a32:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a42:	2302      	movs	r3, #2
 8000a44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a4a:	230a      	movs	r3, #10
 8000a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fd14 	bl	800248c <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a6a:	f000 f82f 	bl	8000acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2303      	movs	r3, #3
 8000a74:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	2104      	movs	r1, #4
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 f8e6 	bl	8002c58 <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a92:	f000 f81b 	bl	8000acc <Error_Handler>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3758      	adds	r7, #88	; 0x58
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	it_uart = 1;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_UART_RxCpltCallback+0x20>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 1);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4904      	ldr	r1, [pc, #16]	; (8000ac4 <HAL_UART_RxCpltCallback+0x24>)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <HAL_UART_RxCpltCallback+0x28>)
 8000ab4:	f003 f874 	bl	8003ba0 <HAL_UART_Receive_IT>
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000098 	.word	0x20000098
 8000ac4:	20000174 	.word	0x20000174
 8000ac8:	20000238 	.word	0x20000238

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x44>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6593      	str	r3, [r2, #88]	; 0x58
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000b28:	1d39      	adds	r1, r7, #4
 8000b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4803      	ldr	r0, [pc, #12]	; (8000b40 <__io_putchar+0x20>)
 8000b32:	f002 ffa1 	bl	8003a78 <HAL_UART_Transmit>

  return ch;
 8000b36:	687b      	ldr	r3, [r7, #4]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000238 	.word	0x20000238

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 fa7a 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <I2C1_EV_IRQHandler+0x10>)
 8000b9e:	f001 f97f 	bl	8001ea0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200000d0 	.word	0x200000d0

08000bac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <USART2_IRQHandler+0x10>)
 8000bb2:	f003 f839 	bl	8003c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000238 	.word	0x20000238

08000bc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e00a      	b.n	8000be8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bd2:	f3af 8000 	nop.w
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	b2ca      	uxtb	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf0      	blt.n	8000bd2 <_read+0x12>
	}

return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e009      	b.n	8000c20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff83 	bl	8000b20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf1      	blt.n	8000c0c <_write+0x12>
	}
	return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_close>:

int _close(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
	return -1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_isatty>:

int _isatty(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
	return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f003 ff88 	bl	8004be0 <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20018000 	.word	0x20018000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	2000009c 	.word	0x2000009c
 8000d04:	200002d0 	.word	0x200002d0

08000d08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <SystemInit+0x5c>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <SystemInit+0x5c>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <SystemInit+0x60>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <SystemInit+0x60>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <SystemInit+0x60>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <SystemInit+0x60>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <SystemInit+0x60>)
 8000d34:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d38:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <SystemInit+0x60>)
 8000d40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d44:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <SystemInit+0x60>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <SystemInit+0x60>)
 8000d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SystemInit+0x60>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00
 8000d68:	40021000 	.word	0x40021000

08000d6c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_UART4_Init+0x58>)
 8000d72:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <MX_UART4_Init+0x5c>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_UART4_Init+0x58>)
 8000d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d7c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_UART4_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_UART4_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_UART4_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_UART4_Init+0x58>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_UART4_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_UART4_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_UART4_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_UART4_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_UART4_Init+0x58>)
 8000db0:	f002 fe14 	bl	80039dc <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000dba:	f7ff fe87 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001b4 	.word	0x200001b4
 8000dc8:	40004c00 	.word	0x40004c00

08000dcc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000dd2:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <MX_USART2_UART_Init+0x5c>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_USART2_UART_Init+0x58>)
 8000e10:	f002 fde4 	bl	80039dc <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e1a:	f7ff fe57 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000238 	.word	0x20000238
 8000e28:	40004400 	.word	0x40004400

08000e2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0ae      	sub	sp, #184	; 0xb8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	2288      	movs	r2, #136	; 0x88
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f003 fef1 	bl	8004c34 <memset>
  if(uartHandle->Instance==UART4)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a46      	ldr	r2, [pc, #280]	; (8000f70 <HAL_UART_MspInit+0x144>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d13c      	bne.n	8000ed6 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f002 f8fb 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e74:	f7ff fe2a 	bl	8000acc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e78:	4b3e      	ldr	r3, [pc, #248]	; (8000f74 <HAL_UART_MspInit+0x148>)
 8000e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7c:	4a3d      	ldr	r2, [pc, #244]	; (8000f74 <HAL_UART_MspInit+0x148>)
 8000e7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e82:	6593      	str	r3, [r2, #88]	; 0x58
 8000e84:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <HAL_UART_MspInit+0x148>)
 8000e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e8c:	61bb      	str	r3, [r7, #24]
 8000e8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <HAL_UART_MspInit+0x148>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e94:	4a37      	ldr	r2, [pc, #220]	; (8000f74 <HAL_UART_MspInit+0x148>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9c:	4b35      	ldr	r3, [pc, #212]	; (8000f74 <HAL_UART_MspInit+0x148>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ec0:	2308      	movs	r3, #8
 8000ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f000 fbaa 	bl	8001628 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ed4:	e048      	b.n	8000f68 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a27      	ldr	r2, [pc, #156]	; (8000f78 <HAL_UART_MspInit+0x14c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d143      	bne.n	8000f68 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 f8b9 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000ef8:	f7ff fde8 	bl	8000acc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_UART_MspInit+0x148>)
 8000efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f00:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <HAL_UART_MspInit+0x148>)
 8000f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f06:	6593      	str	r3, [r2, #88]	; 0x58
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_UART_MspInit+0x148>)
 8000f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_UART_MspInit+0x148>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f18:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <HAL_UART_MspInit+0x148>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_UART_MspInit+0x148>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f44:	2307      	movs	r3, #7
 8000f46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f000 fb68 	bl	8001628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2026      	movs	r0, #38	; 0x26
 8000f5e:	f000 faae 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f62:	2026      	movs	r0, #38	; 0x26
 8000f64:	f000 fac7 	bl	80014f6 <HAL_NVIC_EnableIRQ>
}
 8000f68:	bf00      	nop
 8000f6a:	37b8      	adds	r7, #184	; 0xb8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40004c00 	.word	0x40004c00
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40004400 	.word	0x40004400

08000f7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f80:	f7ff fec2 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f86:	e003      	b.n	8000f90 <LoopCopyDataInit>

08000f88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f8e:	3104      	adds	r1, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f90:	480a      	ldr	r0, [pc, #40]	; (8000fbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f98:	d3f6      	bcc.n	8000f88 <CopyDataInit>
	ldr	r2, =_sbss
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f9c:	e002      	b.n	8000fa4 <LoopFillZerobss>

08000f9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fa0:	f842 3b04 	str.w	r3, [r2], #4

08000fa4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <LoopForever+0x16>)
	cmp	r2, r3
 8000fa6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fa8:	d3f9      	bcc.n	8000f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000faa:	f003 fe1f 	bl	8004bec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fae:	f7ff fc63 	bl	8000878 <main>

08000fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb2:	e7fe      	b.n	8000fb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000fb8:	08005d40 	.word	0x08005d40
	ldr	r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fc0:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8000fc4:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8000fc8:	200002d0 	.word	0x200002d0

08000fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC1_2_IRQHandler>
	...

08000fd0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_Init+0x3c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <HAL_Init+0x3c>)
 8000fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe6:	2003      	movs	r0, #3
 8000fe8:	f000 fa5e 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fec:	2000      	movs	r0, #0
 8000fee:	f000 f80f 	bl	8001010 <HAL_InitTick>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	e001      	b.n	8001002 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ffe:	f7ff fd6b 	bl	8000ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001002:	79fb      	ldrb	r3, [r7, #7]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40022000 	.word	0x40022000

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_InitTick+0x6c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d023      	beq.n	800106c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_InitTick+0x70>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_InitTick+0x6c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fa69 	bl	8001512 <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10f      	bne.n	8001066 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d809      	bhi.n	8001060 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001054:	f000 fa33 	bl	80014be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_InitTick+0x74>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e007      	b.n	8001070 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	e004      	b.n	8001070 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	e001      	b.n	8001070 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000014 	.word	0x20000014
 8001080:	2000000c 	.word	0x2000000c
 8001084:	20000010 	.word	0x20000010

08001088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x20>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x24>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <HAL_IncTick+0x24>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000014 	.word	0x20000014
 80010ac:	200002bc 	.word	0x200002bc

080010b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <HAL_GetTick+0x14>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	200002bc 	.word	0x200002bc

080010c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff ffee 	bl	80010b0 <HAL_GetTick>
 80010d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010e0:	d005      	beq.n	80010ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_Delay+0x44>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ee:	bf00      	nop
 80010f0:	f7ff ffde 	bl	80010b0 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8f7      	bhi.n	80010f0 <HAL_Delay+0x28>
  {
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000014 	.word	0x20000014

08001110 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e0ed      	b.n	80012fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff fa50 	bl	80005d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0202 	bic.w	r2, r2, #2
 8001142:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001144:	f7ff ffb4 	bl	80010b0 <HAL_GetTick>
 8001148:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800114a:	e012      	b.n	8001172 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800114c:	f7ff ffb0 	bl	80010b0 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b0a      	cmp	r3, #10
 8001158:	d90b      	bls.n	8001172 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2205      	movs	r2, #5
 800116a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e0c5      	b.n	80012fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1e5      	bne.n	800114c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0201 	orr.w	r2, r2, #1
 800118e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001190:	f7ff ff8e 	bl	80010b0 <HAL_GetTick>
 8001194:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001196:	e012      	b.n	80011be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001198:	f7ff ff8a 	bl	80010b0 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b0a      	cmp	r3, #10
 80011a4:	d90b      	bls.n	80011be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2205      	movs	r2, #5
 80011b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e09f      	b.n	80012fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0e5      	beq.n	8001198 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d108      	bne.n	80011e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e007      	b.n	80011f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7e5b      	ldrb	r3, [r3, #25]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d108      	bne.n	8001210 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	e007      	b.n	8001220 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800121e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7e9b      	ldrb	r3, [r3, #26]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d108      	bne.n	800123a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0220 	orr.w	r2, r2, #32
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e007      	b.n	800124a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0220 	bic.w	r2, r2, #32
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7edb      	ldrb	r3, [r3, #27]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d108      	bne.n	8001264 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0210 	bic.w	r2, r2, #16
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e007      	b.n	8001274 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0210 	orr.w	r2, r2, #16
 8001272:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7f1b      	ldrb	r3, [r3, #28]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d108      	bne.n	800128e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0208 	orr.w	r2, r2, #8
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	e007      	b.n	800129e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0208 	bic.w	r2, r2, #8
 800129c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7f5b      	ldrb	r3, [r3, #29]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d108      	bne.n	80012b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f042 0204 	orr.w	r2, r2, #4
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	e007      	b.n	80012c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0204 	bic.w	r2, r2, #4
 80012c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	ea42 0103 	orr.w	r1, r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	1e5a      	subs	r2, r3, #1
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4907      	ldr	r1, [pc, #28]	; (80013a4 <__NVIC_EnableIRQ+0x38>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff29 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff3e 	bl	8001350 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff8e 	bl	80013fc <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff31 	bl	800136c <__NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa2 	bl	8001464 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d008      	beq.n	8001554 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2204      	movs	r2, #4
 8001546:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e022      	b.n	800159a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 020e 	bic.w	r2, r2, #14
 8001562:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0201 	bic.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	f003 021c 	and.w	r2, r3, #28
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	2101      	movs	r1, #1
 8001582:	fa01 f202 	lsl.w	r2, r1, r2
 8001586:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d005      	beq.n	80015ca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2204      	movs	r2, #4
 80015c2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e029      	b.n	800161e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 020e 	bic.w	r2, r2, #14
 80015d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f003 021c 	and.w	r2, r3, #28
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	2101      	movs	r1, #1
 80015f8:	fa01 f202 	lsl.w	r2, r1, r2
 80015fc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	4798      	blx	r3
    }
  }
  return status;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001636:	e17f      	b.n	8001938 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8171 	beq.w	8001932 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d00b      	beq.n	8001670 <HAL_GPIO_Init+0x48>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d007      	beq.n	8001670 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001664:	2b11      	cmp	r3, #17
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b12      	cmp	r3, #18
 800166e:	d130      	bne.n	80016d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016a6:	2201      	movs	r2, #1
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	f003 0201 	and.w	r2, r3, #1
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d118      	bne.n	8001710 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016e4:	2201      	movs	r2, #1
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4013      	ands	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	f003 0201 	and.w	r2, r3, #1
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x128>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b12      	cmp	r3, #18
 800174e:	d123      	bne.n	8001798 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	6939      	ldr	r1, [r7, #16]
 8001794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80ac 	beq.w	8001932 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	4b5f      	ldr	r3, [pc, #380]	; (8001958 <HAL_GPIO_Init+0x330>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017de:	4a5e      	ldr	r2, [pc, #376]	; (8001958 <HAL_GPIO_Init+0x330>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6613      	str	r3, [r2, #96]	; 0x60
 80017e6:	4b5c      	ldr	r3, [pc, #368]	; (8001958 <HAL_GPIO_Init+0x330>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017f2:	4a5a      	ldr	r2, [pc, #360]	; (800195c <HAL_GPIO_Init+0x334>)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	3302      	adds	r3, #2
 80017fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	220f      	movs	r2, #15
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800181c:	d025      	beq.n	800186a <HAL_GPIO_Init+0x242>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4f      	ldr	r2, [pc, #316]	; (8001960 <HAL_GPIO_Init+0x338>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d01f      	beq.n	8001866 <HAL_GPIO_Init+0x23e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4e      	ldr	r2, [pc, #312]	; (8001964 <HAL_GPIO_Init+0x33c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d019      	beq.n	8001862 <HAL_GPIO_Init+0x23a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4d      	ldr	r2, [pc, #308]	; (8001968 <HAL_GPIO_Init+0x340>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0x236>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4c      	ldr	r2, [pc, #304]	; (800196c <HAL_GPIO_Init+0x344>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d00d      	beq.n	800185a <HAL_GPIO_Init+0x232>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4b      	ldr	r2, [pc, #300]	; (8001970 <HAL_GPIO_Init+0x348>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d007      	beq.n	8001856 <HAL_GPIO_Init+0x22e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4a      	ldr	r2, [pc, #296]	; (8001974 <HAL_GPIO_Init+0x34c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d101      	bne.n	8001852 <HAL_GPIO_Init+0x22a>
 800184e:	2306      	movs	r3, #6
 8001850:	e00c      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001852:	2307      	movs	r3, #7
 8001854:	e00a      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001856:	2305      	movs	r3, #5
 8001858:	e008      	b.n	800186c <HAL_GPIO_Init+0x244>
 800185a:	2304      	movs	r3, #4
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x244>
 800185e:	2303      	movs	r3, #3
 8001860:	e004      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001862:	2302      	movs	r3, #2
 8001864:	e002      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_GPIO_Init+0x244>
 800186a:	2300      	movs	r3, #0
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	f002 0203 	and.w	r2, r2, #3
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	4093      	lsls	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800187c:	4937      	ldr	r1, [pc, #220]	; (800195c <HAL_GPIO_Init+0x334>)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3302      	adds	r3, #2
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_GPIO_Init+0x350>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018ae:	4a32      	ldr	r2, [pc, #200]	; (8001978 <HAL_GPIO_Init+0x350>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_GPIO_Init+0x350>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018d8:	4a27      	ldr	r2, [pc, #156]	; (8001978 <HAL_GPIO_Init+0x350>)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_GPIO_Init+0x350>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_GPIO_Init+0x350>)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_GPIO_Init+0x350>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800192c:	4a12      	ldr	r2, [pc, #72]	; (8001978 <HAL_GPIO_Init+0x350>)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	f47f ae78 	bne.w	8001638 <HAL_GPIO_Init+0x10>
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000
 8001960:	48000400 	.word	0x48000400
 8001964:	48000800 	.word	0x48000800
 8001968:	48000c00 	.word	0x48000c00
 800196c:	48001000 	.word	0x48001000
 8001970:	48001400 	.word	0x48001400
 8001974:	48001800 	.word	0x48001800
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e081      	b.n	8001ac2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7fe feea 	bl	80007ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2224      	movs	r2, #36	; 0x24
 80019dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d107      	bne.n	8001a26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	e006      	b.n	8001a34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d104      	bne.n	8001a46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	ea42 0103 	orr.w	r1, r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	021a      	lsls	r2, r3, #8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69d9      	ldr	r1, [r3, #28]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1a      	ldr	r2, [r3, #32]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2220      	movs	r2, #32
 8001aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	460b      	mov	r3, r1
 8001ada:	817b      	strh	r3, [r7, #10]
 8001adc:	4613      	mov	r3, r2
 8001ade:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b20      	cmp	r3, #32
 8001aea:	f040 80da 	bne.w	8001ca2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_I2C_Master_Transmit+0x30>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e0d3      	b.n	8001ca4 <HAL_I2C_Master_Transmit+0x1d8>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b04:	f7ff fad4 	bl	80010b0 <HAL_GetTick>
 8001b08:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2319      	movs	r3, #25
 8001b10:	2201      	movs	r2, #1
 8001b12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 fa00 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e0be      	b.n	8001ca4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2221      	movs	r2, #33	; 0x21
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2210      	movs	r2, #16
 8001b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	893a      	ldrh	r2, [r7, #8]
 8001b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2bff      	cmp	r3, #255	; 0xff
 8001b56:	d90e      	bls.n	8001b76 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	22ff      	movs	r2, #255	; 0xff
 8001b5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	8979      	ldrh	r1, [r7, #10]
 8001b66:	4b51      	ldr	r3, [pc, #324]	; (8001cac <HAL_I2C_Master_Transmit+0x1e0>)
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fb62 	bl	8002238 <I2C_TransferConfig>
 8001b74:	e06c      	b.n	8001c50 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	8979      	ldrh	r1, [r7, #10]
 8001b88:	4b48      	ldr	r3, [pc, #288]	; (8001cac <HAL_I2C_Master_Transmit+0x1e0>)
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 fb51 	bl	8002238 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001b96:	e05b      	b.n	8001c50 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	6a39      	ldr	r1, [r7, #32]
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 f9fd 	bl	8001f9c <I2C_WaitOnTXISFlagUntilTimeout>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e07b      	b.n	8001ca4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d034      	beq.n	8001c50 <HAL_I2C_Master_Transmit+0x184>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d130      	bne.n	8001c50 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2180      	movs	r1, #128	; 0x80
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f000 f98f 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e04d      	b.n	8001ca4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	2bff      	cmp	r3, #255	; 0xff
 8001c10:	d90e      	bls.n	8001c30 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	22ff      	movs	r2, #255	; 0xff
 8001c16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	8979      	ldrh	r1, [r7, #10]
 8001c20:	2300      	movs	r3, #0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 fb05 	bl	8002238 <I2C_TransferConfig>
 8001c2e:	e00f      	b.n	8001c50 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	8979      	ldrh	r1, [r7, #10]
 8001c42:	2300      	movs	r3, #0
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 faf4 	bl	8002238 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d19e      	bne.n	8001b98 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	6a39      	ldr	r1, [r7, #32]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f9dc 	bl	800201c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e01a      	b.n	8001ca4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2220      	movs	r2, #32
 8001c74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001c82:	400b      	ands	r3, r1
 8001c84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001ca2:	2302      	movs	r3, #2
  }
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	80002000 	.word	0x80002000
 8001cb0:	fe00e800 	.word	0xfe00e800

08001cb4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	817b      	strh	r3, [r7, #10]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	f040 80db 	bne.w	8001e8c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_I2C_Master_Receive+0x30>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e0d4      	b.n	8001e8e <HAL_I2C_Master_Receive+0x1da>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cec:	f7ff f9e0 	bl	80010b0 <HAL_GetTick>
 8001cf0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2319      	movs	r3, #25
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f90c 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0bf      	b.n	8001e8e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2222      	movs	r2, #34	; 0x22
 8001d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2210      	movs	r2, #16
 8001d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	893a      	ldrh	r2, [r7, #8]
 8001d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	2bff      	cmp	r3, #255	; 0xff
 8001d3e:	d90e      	bls.n	8001d5e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	22ff      	movs	r2, #255	; 0xff
 8001d44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	8979      	ldrh	r1, [r7, #10]
 8001d4e:	4b52      	ldr	r3, [pc, #328]	; (8001e98 <HAL_I2C_Master_Receive+0x1e4>)
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fa6e 	bl	8002238 <I2C_TransferConfig>
 8001d5c:	e06d      	b.n	8001e3a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	8979      	ldrh	r1, [r7, #10]
 8001d70:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <HAL_I2C_Master_Receive+0x1e4>)
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 fa5d 	bl	8002238 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001d7e:	e05c      	b.n	8001e3a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	6a39      	ldr	r1, [r7, #32]
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f985 	bl	8002094 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e07c      	b.n	8001e8e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d034      	beq.n	8001e3a <HAL_I2C_Master_Receive+0x186>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d130      	bne.n	8001e3a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	2200      	movs	r2, #0
 8001de0:	2180      	movs	r1, #128	; 0x80
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f89a 	bl	8001f1c <I2C_WaitOnFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e04d      	b.n	8001e8e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2bff      	cmp	r3, #255	; 0xff
 8001dfa:	d90e      	bls.n	8001e1a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	22ff      	movs	r2, #255	; 0xff
 8001e00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	8979      	ldrh	r1, [r7, #10]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 fa10 	bl	8002238 <I2C_TransferConfig>
 8001e18:	e00f      	b.n	8001e3a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	8979      	ldrh	r1, [r7, #10]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f9ff 	bl	8002238 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d19d      	bne.n	8001d80 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	6a39      	ldr	r1, [r7, #32]
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 f8e7 	bl	800201c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e01a      	b.n	8001e8e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6859      	ldr	r1, [r3, #4]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_I2C_Master_Receive+0x1e8>)
 8001e6c:	400b      	ands	r3, r1
 8001e6e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e000      	b.n	8001e8e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001e8c:	2302      	movs	r3, #2
  }
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	80002400 	.word	0x80002400
 8001e9c:	fe00e800 	.word	0xfe00e800

08001ea0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	68f9      	ldr	r1, [r7, #12]
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
  }
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d103      	bne.n	8001ef2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d007      	beq.n	8001f10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	619a      	str	r2, [r3, #24]
  }
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f2c:	e022      	b.n	8001f74 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f34:	d01e      	beq.n	8001f74 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f36:	f7ff f8bb 	bl	80010b0 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d302      	bcc.n	8001f4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d113      	bne.n	8001f74 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f50:	f043 0220 	orr.w	r2, r3, #32
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e00f      	b.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d0cd      	beq.n	8001f2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fa8:	e02c      	b.n	8002004 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f8dc 	bl	800216c <I2C_IsAcknowledgeFailed>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e02a      	b.n	8002014 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fc4:	d01e      	beq.n	8002004 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc6:	f7ff f873 	bl	80010b0 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d113      	bne.n	8002004 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe0:	f043 0220 	orr.w	r2, r3, #32
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e007      	b.n	8002014 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b02      	cmp	r3, #2
 8002010:	d1cb      	bne.n	8001faa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002028:	e028      	b.n	800207c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f89c 	bl	800216c <I2C_IsAcknowledgeFailed>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e026      	b.n	800208c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203e:	f7ff f837 	bl	80010b0 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	429a      	cmp	r2, r3
 800204c:	d302      	bcc.n	8002054 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d113      	bne.n	800207c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	f043 0220 	orr.w	r2, r3, #32
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e007      	b.n	800208c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b20      	cmp	r3, #32
 8002088:	d1cf      	bne.n	800202a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020a0:	e055      	b.n	800214e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f860 	bl	800216c <I2C_IsAcknowledgeFailed>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e053      	b.n	800215e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d129      	bne.n	8002118 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d105      	bne.n	80020de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e03f      	b.n	800215e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2220      	movs	r2, #32
 80020e4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80020f2:	400b      	ands	r3, r1
 80020f4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e022      	b.n	800215e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002118:	f7fe ffca 	bl	80010b0 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	429a      	cmp	r2, r3
 8002126:	d302      	bcc.n	800212e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10f      	bne.n	800214e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f043 0220 	orr.w	r2, r3, #32
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e007      	b.n	800215e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b04      	cmp	r3, #4
 800215a:	d1a2      	bne.n	80020a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	fe00e800 	.word	0xfe00e800

0800216c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b10      	cmp	r3, #16
 8002184:	d151      	bne.n	800222a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002186:	e022      	b.n	80021ce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800218e:	d01e      	beq.n	80021ce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002190:	f7fe ff8e 	bl	80010b0 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	429a      	cmp	r2, r3
 800219e:	d302      	bcc.n	80021a6 <I2C_IsAcknowledgeFailed+0x3a>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d113      	bne.n	80021ce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f043 0220 	orr.w	r2, r3, #32
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e02e      	b.n	800222c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d1d5      	bne.n	8002188 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2210      	movs	r2, #16
 80021e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2220      	movs	r2, #32
 80021ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff fe71 	bl	8001ed4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <I2C_IsAcknowledgeFailed+0xc8>)
 80021fe:	400b      	ands	r3, r1
 8002200:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f043 0204 	orr.w	r2, r3, #4
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	fe00e800 	.word	0xfe00e800

08002238 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	817b      	strh	r3, [r7, #10]
 8002246:	4613      	mov	r3, r2
 8002248:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	0d5b      	lsrs	r3, r3, #21
 8002254:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <I2C_TransferConfig+0x58>)
 800225a:	430b      	orrs	r3, r1
 800225c:	43db      	mvns	r3, r3
 800225e:	ea02 0103 	and.w	r1, r2, r3
 8002262:	897b      	ldrh	r3, [r7, #10]
 8002264:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002268:	7a7b      	ldrb	r3, [r7, #9]
 800226a:	041b      	lsls	r3, r3, #16
 800226c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	431a      	orrs	r2, r3
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	431a      	orrs	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	03ff63ff 	.word	0x03ff63ff

08002294 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d138      	bne.n	800231c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e032      	b.n	800231e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2224      	movs	r2, #36	; 0x24
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6819      	ldr	r1, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	e000      	b.n	800231e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800231c:	2302      	movs	r3, #2
  }
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800232a:	b480      	push	{r7}
 800232c:	b085      	sub	sp, #20
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b20      	cmp	r3, #32
 800233e:	d139      	bne.n	80023b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800234a:	2302      	movs	r3, #2
 800234c:	e033      	b.n	80023b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2224      	movs	r2, #36	; 0x24
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0201 	bic.w	r2, r2, #1
 800236c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800237c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e000      	b.n	80023b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
  }
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <HAL_PWREx_GetVoltageRange+0x18>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40007000 	.word	0x40007000

080023e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ee:	d130      	bne.n	8002452 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023f0:	4b23      	ldr	r3, [pc, #140]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023fc:	d038      	beq.n	8002470 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002406:	4a1e      	ldr	r2, [pc, #120]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002408:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2232      	movs	r2, #50	; 0x32
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	4a1b      	ldr	r2, [pc, #108]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0c9b      	lsrs	r3, r3, #18
 8002420:	3301      	adds	r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002424:	e002      	b.n	800242c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3b01      	subs	r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002438:	d102      	bne.n	8002440 <HAL_PWREx_ControlVoltageScaling+0x60>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f2      	bne.n	8002426 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244c:	d110      	bne.n	8002470 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e00f      	b.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800245a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245e:	d007      	beq.n	8002470 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002468:	4a05      	ldr	r2, [pc, #20]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800246a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800246e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40007000 	.word	0x40007000
 8002484:	2000000c 	.word	0x2000000c
 8002488:	431bde83 	.word	0x431bde83

0800248c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e3d4      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249e:	4ba1      	ldr	r3, [pc, #644]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024a8:	4b9e      	ldr	r3, [pc, #632]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 80e4 	beq.w	8002688 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <HAL_RCC_OscConfig+0x4a>
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b0c      	cmp	r3, #12
 80024ca:	f040 808b 	bne.w	80025e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	f040 8087 	bne.w	80025e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024d6:	4b93      	ldr	r3, [pc, #588]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_RCC_OscConfig+0x62>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e3ac      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1a      	ldr	r2, [r3, #32]
 80024f2:	4b8c      	ldr	r3, [pc, #560]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d004      	beq.n	8002508 <HAL_RCC_OscConfig+0x7c>
 80024fe:	4b89      	ldr	r3, [pc, #548]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002506:	e005      	b.n	8002514 <HAL_RCC_OscConfig+0x88>
 8002508:	4b86      	ldr	r3, [pc, #536]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800250a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250e:	091b      	lsrs	r3, r3, #4
 8002510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002514:	4293      	cmp	r3, r2
 8002516:	d223      	bcs.n	8002560 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	4618      	mov	r0, r3
 800251e:	f000 fd41 	bl	8002fa4 <RCC_SetFlashLatencyFromMSIRange>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e38d      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800252c:	4b7d      	ldr	r3, [pc, #500]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a7c      	ldr	r2, [pc, #496]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002532:	f043 0308 	orr.w	r3, r3, #8
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b7a      	ldr	r3, [pc, #488]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4977      	ldr	r1, [pc, #476]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800254a:	4b76      	ldr	r3, [pc, #472]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	4972      	ldr	r1, [pc, #456]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
 800255e:	e025      	b.n	80025ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002560:	4b70      	ldr	r3, [pc, #448]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a6f      	ldr	r2, [pc, #444]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002566:	f043 0308 	orr.w	r3, r3, #8
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b6d      	ldr	r3, [pc, #436]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	496a      	ldr	r1, [pc, #424]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800257e:	4b69      	ldr	r3, [pc, #420]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	4965      	ldr	r1, [pc, #404]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fd01 	bl	8002fa4 <RCC_SetFlashLatencyFromMSIRange>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e34d      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ac:	f000 fc36 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b5c      	ldr	r3, [pc, #368]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	495a      	ldr	r1, [pc, #360]	; (8002728 <HAL_RCC_OscConfig+0x29c>)
 80025be:	5ccb      	ldrb	r3, [r1, r3]
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
 80025c8:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_RCC_OscConfig+0x2a0>)
 80025ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025cc:	4b58      	ldr	r3, [pc, #352]	; (8002730 <HAL_RCC_OscConfig+0x2a4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fd1d 	bl	8001010 <HAL_InitTick>
 80025d6:	4603      	mov	r3, r0
 80025d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d052      	beq.n	8002686 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	e331      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d032      	beq.n	8002652 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025ec:	4b4d      	ldr	r3, [pc, #308]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a4c      	ldr	r2, [pc, #304]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025f8:	f7fe fd5a 	bl	80010b0 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002600:	f7fe fd56 	bl	80010b0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e31a      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002612:	4b44      	ldr	r3, [pc, #272]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800261e:	4b41      	ldr	r3, [pc, #260]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a40      	ldr	r2, [pc, #256]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002624:	f043 0308 	orr.w	r3, r3, #8
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b3e      	ldr	r3, [pc, #248]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	493b      	ldr	r1, [pc, #236]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800263c:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	4936      	ldr	r1, [pc, #216]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
 8002650:	e01a      	b.n	8002688 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002652:	4b34      	ldr	r3, [pc, #208]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a33      	ldr	r2, [pc, #204]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800265e:	f7fe fd27 	bl	80010b0 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002666:	f7fe fd23 	bl	80010b0 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e2e7      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002678:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x1da>
 8002684:	e000      	b.n	8002688 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002686:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d074      	beq.n	800277e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b08      	cmp	r3, #8
 8002698:	d005      	beq.n	80026a6 <HAL_RCC_OscConfig+0x21a>
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2b0c      	cmp	r3, #12
 800269e:	d10e      	bne.n	80026be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d10b      	bne.n	80026be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a6:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d064      	beq.n	800277c <HAL_RCC_OscConfig+0x2f0>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d160      	bne.n	800277c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e2c4      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x24a>
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a15      	ldr	r2, [pc, #84]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	e01d      	b.n	8002712 <HAL_RCC_OscConfig+0x286>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026de:	d10c      	bne.n	80026fa <HAL_RCC_OscConfig+0x26e>
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	e00b      	b.n	8002712 <HAL_RCC_OscConfig+0x286>
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a09      	ldr	r2, [pc, #36]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a06      	ldr	r2, [pc, #24]	; (8002724 <HAL_RCC_OscConfig+0x298>)
 800270c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002710:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d01c      	beq.n	8002754 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe fcc9 	bl	80010b0 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002720:	e011      	b.n	8002746 <HAL_RCC_OscConfig+0x2ba>
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	08005c50 	.word	0x08005c50
 800272c:	2000000c 	.word	0x2000000c
 8002730:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002734:	f7fe fcbc 	bl	80010b0 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e280      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002746:	4baf      	ldr	r3, [pc, #700]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x2a8>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fcac 	bl	80010b0 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275c:	f7fe fca8 	bl	80010b0 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e26c      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800276e:	4ba5      	ldr	r3, [pc, #660]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x2d0>
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d060      	beq.n	800284c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d005      	beq.n	800279c <HAL_RCC_OscConfig+0x310>
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d119      	bne.n	80027ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d116      	bne.n	80027ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800279c:	4b99      	ldr	r3, [pc, #612]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_OscConfig+0x328>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e249      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b93      	ldr	r3, [pc, #588]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	4990      	ldr	r1, [pc, #576]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c8:	e040      	b.n	800284c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d023      	beq.n	800281a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d2:	4b8c      	ldr	r3, [pc, #560]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a8b      	ldr	r2, [pc, #556]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7fe fc67 	bl	80010b0 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e6:	f7fe fc63 	bl	80010b0 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e227      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f8:	4b82      	ldr	r3, [pc, #520]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b7f      	ldr	r3, [pc, #508]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	497c      	ldr	r1, [pc, #496]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
 8002818:	e018      	b.n	800284c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281a:	4b7a      	ldr	r3, [pc, #488]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a79      	ldr	r2, [pc, #484]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe fc43 	bl	80010b0 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282e:	f7fe fc3f 	bl	80010b0 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e203      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002840:	4b70      	ldr	r3, [pc, #448]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d03c      	beq.n	80028d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01c      	beq.n	800289a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002860:	4b68      	ldr	r3, [pc, #416]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002866:	4a67      	ldr	r2, [pc, #412]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7fe fc1e 	bl	80010b0 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002878:	f7fe fc1a 	bl	80010b0 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e1de      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800288a:	4b5e      	ldr	r3, [pc, #376]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800288c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ef      	beq.n	8002878 <HAL_RCC_OscConfig+0x3ec>
 8002898:	e01b      	b.n	80028d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800289a:	4b5a      	ldr	r3, [pc, #360]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800289c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a0:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe fc01 	bl	80010b0 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b2:	f7fe fbfd 	bl	80010b0 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1c1      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c4:	4b4f      	ldr	r3, [pc, #316]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1ef      	bne.n	80028b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80a6 	beq.w	8002a2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028e4:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10d      	bne.n	800290c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f0:	4b44      	ldr	r3, [pc, #272]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f4:	4a43      	ldr	r2, [pc, #268]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fa:	6593      	str	r3, [r2, #88]	; 0x58
 80028fc:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80028fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002908:	2301      	movs	r3, #1
 800290a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800290c:	4b3e      	ldr	r3, [pc, #248]	; (8002a08 <HAL_RCC_OscConfig+0x57c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d118      	bne.n	800294a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002918:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <HAL_RCC_OscConfig+0x57c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a3a      	ldr	r2, [pc, #232]	; (8002a08 <HAL_RCC_OscConfig+0x57c>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002922:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002924:	f7fe fbc4 	bl	80010b0 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292c:	f7fe fbc0 	bl	80010b0 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e184      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293e:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <HAL_RCC_OscConfig+0x57c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d108      	bne.n	8002964 <HAL_RCC_OscConfig+0x4d8>
 8002952:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	4a2a      	ldr	r2, [pc, #168]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002962:	e024      	b.n	80029ae <HAL_RCC_OscConfig+0x522>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b05      	cmp	r3, #5
 800296a:	d110      	bne.n	800298e <HAL_RCC_OscConfig+0x502>
 800296c:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	4a24      	ldr	r2, [pc, #144]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800297c:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	4a20      	ldr	r2, [pc, #128]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800298c:	e00f      	b.n	80029ae <HAL_RCC_OscConfig+0x522>
 800298e:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80029a6:	f023 0304 	bic.w	r3, r3, #4
 80029aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d016      	beq.n	80029e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7fe fb7b 	bl	80010b0 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe fb77 	bl	80010b0 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e139      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_OscConfig+0x578>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ed      	beq.n	80029be <HAL_RCC_OscConfig+0x532>
 80029e2:	e01a      	b.n	8002a1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe fb64 	bl	80010b0 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029ea:	e00f      	b.n	8002a0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe fb60 	bl	80010b0 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d906      	bls.n	8002a0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e122      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a0c:	4b90      	ldr	r3, [pc, #576]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1e8      	bne.n	80029ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a1a:	7ffb      	ldrb	r3, [r7, #31]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a20:	4b8b      	ldr	r3, [pc, #556]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	4a8a      	ldr	r2, [pc, #552]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8108 	beq.w	8002c46 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	f040 80d0 	bne.w	8002be0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a40:	4b83      	ldr	r3, [pc, #524]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f003 0203 	and.w	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d130      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d127      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d11f      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a80:	2a07      	cmp	r2, #7
 8002a82:	bf14      	ite	ne
 8002a84:	2201      	movne	r2, #1
 8002a86:	2200      	moveq	r2, #0
 8002a88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d113      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d109      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d06e      	beq.n	8002b94 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	d069      	beq.n	8002b90 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002abc:	4b64      	ldr	r3, [pc, #400]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ac8:	4b61      	ldr	r3, [pc, #388]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0b7      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ad8:	4b5d      	ldr	r3, [pc, #372]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a5c      	ldr	r2, [pc, #368]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ae4:	f7fe fae4 	bl	80010b0 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fae0 	bl	80010b0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e0a4      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002afe:	4b54      	ldr	r3, [pc, #336]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b0a:	4b51      	ldr	r3, [pc, #324]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	4b51      	ldr	r3, [pc, #324]	; (8002c54 <HAL_RCC_OscConfig+0x7c8>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b1a:	3a01      	subs	r2, #1
 8002b1c:	0112      	lsls	r2, r2, #4
 8002b1e:	4311      	orrs	r1, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b24:	0212      	lsls	r2, r2, #8
 8002b26:	4311      	orrs	r1, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b2c:	0852      	lsrs	r2, r2, #1
 8002b2e:	3a01      	subs	r2, #1
 8002b30:	0552      	lsls	r2, r2, #21
 8002b32:	4311      	orrs	r1, r2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b38:	0852      	lsrs	r2, r2, #1
 8002b3a:	3a01      	subs	r2, #1
 8002b3c:	0652      	lsls	r2, r2, #25
 8002b3e:	4311      	orrs	r1, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b44:	0912      	lsrs	r2, r2, #4
 8002b46:	0452      	lsls	r2, r2, #17
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	4941      	ldr	r1, [pc, #260]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b50:	4b3f      	ldr	r3, [pc, #252]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a3e      	ldr	r2, [pc, #248]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b5c:	4b3c      	ldr	r3, [pc, #240]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a3b      	ldr	r2, [pc, #236]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b68:	f7fe faa2 	bl	80010b0 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b70:	f7fe fa9e 	bl	80010b0 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e062      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b82:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b8e:	e05a      	b.n	8002c46 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e059      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b94:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d152      	bne.n	8002c46 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ba0:	4b2b      	ldr	r3, [pc, #172]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a2a      	ldr	r2, [pc, #168]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002baa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bac:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4a27      	ldr	r2, [pc, #156]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bb8:	f7fe fa7a 	bl	80010b0 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc0:	f7fe fa76 	bl	80010b0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e03a      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd2:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x734>
 8002bde:	e032      	b.n	8002c46 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d02d      	beq.n	8002c42 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002bec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d105      	bne.n	8002c0a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	4a13      	ldr	r2, [pc, #76]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002c04:	f023 0303 	bic.w	r3, r3, #3
 8002c08:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002c10:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c18:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fa49 	bl	80010b0 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c22:	f7fe fa45 	bl	80010b0 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e009      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_RCC_OscConfig+0x7c4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x796>
 8002c40:	e001      	b.n	8002c46 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	f99d808c 	.word	0xf99d808c

08002c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0c8      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b66      	ldr	r3, [pc, #408]	; (8002e08 <HAL_RCC_ClockConfig+0x1b0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d910      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b63      	ldr	r3, [pc, #396]	; (8002e08 <HAL_RCC_ClockConfig+0x1b0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 0207 	bic.w	r2, r3, #7
 8002c82:	4961      	ldr	r1, [pc, #388]	; (8002e08 <HAL_RCC_ClockConfig+0x1b0>)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b5f      	ldr	r3, [pc, #380]	; (8002e08 <HAL_RCC_ClockConfig+0x1b0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0b0      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d04c      	beq.n	8002d42 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb0:	4b56      	ldr	r3, [pc, #344]	; (8002e0c <HAL_RCC_ClockConfig+0x1b4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d121      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e09e      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d107      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc8:	4b50      	ldr	r3, [pc, #320]	; (8002e0c <HAL_RCC_ClockConfig+0x1b4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d115      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e092      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d107      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ce0:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <HAL_RCC_ClockConfig+0x1b4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e086      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf0:	4b46      	ldr	r3, [pc, #280]	; (8002e0c <HAL_RCC_ClockConfig+0x1b4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e07e      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d00:	4b42      	ldr	r3, [pc, #264]	; (8002e0c <HAL_RCC_ClockConfig+0x1b4>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 0203 	bic.w	r2, r3, #3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	493f      	ldr	r1, [pc, #252]	; (8002e0c <HAL_RCC_ClockConfig+0x1b4>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d12:	f7fe f9cd 	bl	80010b0 <HAL_GetTick>
 8002d16:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d18:	e00a      	b.n	8002d30 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1a:	f7fe f9c9 	bl	80010b0 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e066      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d30:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_RCC_ClockConfig+0x1b4>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 020c 	and.w	r2, r3, #12
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d1eb      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4e:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <HAL_RCC_ClockConfig+0x1b4>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	492c      	ldr	r1, [pc, #176]	; (8002e0c <HAL_RCC_ClockConfig+0x1b4>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d60:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <HAL_RCC_ClockConfig+0x1b0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d210      	bcs.n	8002d90 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <HAL_RCC_ClockConfig+0x1b0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 0207 	bic.w	r2, r3, #7
 8002d76:	4924      	ldr	r1, [pc, #144]	; (8002e08 <HAL_RCC_ClockConfig+0x1b0>)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7e:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <HAL_RCC_ClockConfig+0x1b0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e036      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_RCC_ClockConfig+0x1b4>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4918      	ldr	r1, [pc, #96]	; (8002e0c <HAL_RCC_ClockConfig+0x1b4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dba:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <HAL_RCC_ClockConfig+0x1b4>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4910      	ldr	r1, [pc, #64]	; (8002e0c <HAL_RCC_ClockConfig+0x1b4>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dce:	f000 f825 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <HAL_RCC_ClockConfig+0x1b4>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	490c      	ldr	r1, [pc, #48]	; (8002e10 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	5ccb      	ldrb	r3, [r1, r3]
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dea:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HAL_RCC_ClockConfig+0x1c0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe f90c 	bl	8001010 <HAL_InitTick>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08005c50 	.word	0x08005c50
 8002e14:	2000000c 	.word	0x2000000c
 8002e18:	20000010 	.word	0x20000010

08002e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b089      	sub	sp, #36	; 0x24
 8002e20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e2a:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e34:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x34>
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d121      	bne.n	8002e8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d11e      	bne.n	8002e8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e50:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e5c:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	e005      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e6c:	4b2d      	ldr	r3, [pc, #180]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e78:	4a2b      	ldr	r2, [pc, #172]	; (8002f28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10d      	bne.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d102      	bne.n	8002e9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e94:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	e004      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ea0:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ea2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d134      	bne.n	8002f14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d003      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ec0:	e005      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ec4:	617b      	str	r3, [r7, #20]
      break;
 8002ec6:	e005      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ec8:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eca:	617b      	str	r3, [r7, #20]
      break;
 8002ecc:	e002      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	617b      	str	r3, [r7, #20]
      break;
 8002ed2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	3301      	adds	r3, #1
 8002ee0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	fb02 f203 	mul.w	r2, r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	0e5b      	lsrs	r3, r3, #25
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	3301      	adds	r3, #1
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f14:	69bb      	ldr	r3, [r7, #24]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3724      	adds	r7, #36	; 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40021000 	.word	0x40021000
 8002f28:	08005c68 	.word	0x08005c68
 8002f2c:	00f42400 	.word	0x00f42400
 8002f30:	007a1200 	.word	0x007a1200

08002f34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	2000000c 	.word	0x2000000c

08002f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f50:	f7ff fff0 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	0a1b      	lsrs	r3, r3, #8
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4904      	ldr	r1, [pc, #16]	; (8002f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08005c60 	.word	0x08005c60

08002f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f7c:	f7ff ffda 	bl	8002f34 <HAL_RCC_GetHCLKFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	0adb      	lsrs	r3, r3, #11
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	4904      	ldr	r1, [pc, #16]	; (8002fa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	08005c60 	.word	0x08005c60

08002fa4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fb0:	4b2a      	ldr	r3, [pc, #168]	; (800305c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fbc:	f7ff fa02 	bl	80023c4 <HAL_PWREx_GetVoltageRange>
 8002fc0:	6178      	str	r0, [r7, #20]
 8002fc2:	e014      	b.n	8002fee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fc4:	4b25      	ldr	r3, [pc, #148]	; (800305c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	4a24      	ldr	r2, [pc, #144]	; (800305c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fce:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd0:	4b22      	ldr	r3, [pc, #136]	; (800305c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fdc:	f7ff f9f2 	bl	80023c4 <HAL_PWREx_GetVoltageRange>
 8002fe0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fe2:	4b1e      	ldr	r3, [pc, #120]	; (800305c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe6:	4a1d      	ldr	r2, [pc, #116]	; (800305c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff4:	d10b      	bne.n	800300e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b80      	cmp	r3, #128	; 0x80
 8002ffa:	d919      	bls.n	8003030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2ba0      	cmp	r3, #160	; 0xa0
 8003000:	d902      	bls.n	8003008 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003002:	2302      	movs	r3, #2
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	e013      	b.n	8003030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003008:	2301      	movs	r3, #1
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	e010      	b.n	8003030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b80      	cmp	r3, #128	; 0x80
 8003012:	d902      	bls.n	800301a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003014:	2303      	movs	r3, #3
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	e00a      	b.n	8003030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b80      	cmp	r3, #128	; 0x80
 800301e:	d102      	bne.n	8003026 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003020:	2302      	movs	r3, #2
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	e004      	b.n	8003030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b70      	cmp	r3, #112	; 0x70
 800302a:	d101      	bne.n	8003030 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800302c:	2301      	movs	r3, #1
 800302e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 0207 	bic.w	r2, r3, #7
 8003038:	4909      	ldr	r1, [pc, #36]	; (8003060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	429a      	cmp	r2, r3
 800304c:	d001      	beq.n	8003052 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000
 8003060:	40022000 	.word	0x40022000

08003064 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800306c:	2300      	movs	r3, #0
 800306e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003070:	2300      	movs	r3, #0
 8003072:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307c:	2b00      	cmp	r3, #0
 800307e:	d041      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003084:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003088:	d02a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800308a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800308e:	d824      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003090:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003094:	d008      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800309a:	d81e      	bhi.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a4:	d010      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030a6:	e018      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030a8:	4b86      	ldr	r3, [pc, #536]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4a85      	ldr	r2, [pc, #532]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030b4:	e015      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3304      	adds	r3, #4
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fabb 	bl	8003638 <RCCEx_PLLSAI1_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030c6:	e00c      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3320      	adds	r3, #32
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fba6 	bl	8003820 <RCCEx_PLLSAI2_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030d8:	e003      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	74fb      	strb	r3, [r7, #19]
      break;
 80030de:	e000      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e2:	7cfb      	ldrb	r3, [r7, #19]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030e8:	4b76      	ldr	r3, [pc, #472]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030f6:	4973      	ldr	r1, [pc, #460]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030fe:	e001      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d041      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003114:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003118:	d02a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800311a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800311e:	d824      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003124:	d008      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003126:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800312a:	d81e      	bhi.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003134:	d010      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003136:	e018      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003138:	4b62      	ldr	r3, [pc, #392]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a61      	ldr	r2, [pc, #388]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003142:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003144:	e015      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3304      	adds	r3, #4
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fa73 	bl	8003638 <RCCEx_PLLSAI1_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003156:	e00c      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3320      	adds	r3, #32
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fb5e 	bl	8003820 <RCCEx_PLLSAI2_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003168:	e003      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	74fb      	strb	r3, [r7, #19]
      break;
 800316e:	e000      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003172:	7cfb      	ldrb	r3, [r7, #19]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003178:	4b52      	ldr	r3, [pc, #328]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003186:	494f      	ldr	r1, [pc, #316]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800318e:	e001      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	7cfb      	ldrb	r3, [r7, #19]
 8003192:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80a0 	beq.w	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a2:	2300      	movs	r3, #0
 80031a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031a6:	4b47      	ldr	r3, [pc, #284]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031b6:	2300      	movs	r3, #0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00d      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031bc:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	4a40      	ldr	r2, [pc, #256]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c6:	6593      	str	r3, [r2, #88]	; 0x58
 80031c8:	4b3e      	ldr	r3, [pc, #248]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d4:	2301      	movs	r3, #1
 80031d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031d8:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a3a      	ldr	r2, [pc, #232]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031e4:	f7fd ff64 	bl	80010b0 <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031ea:	e009      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ec:	f7fd ff60 	bl	80010b0 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d902      	bls.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	74fb      	strb	r3, [r7, #19]
        break;
 80031fe:	e005      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003200:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ef      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d15c      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003212:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01f      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	429a      	cmp	r2, r3
 800322e:	d019      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003230:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800323c:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	4a20      	ldr	r2, [pc, #128]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800325c:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d016      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326e:	f7fd ff1f 	bl	80010b0 <HAL_GetTick>
 8003272:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003274:	e00b      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7fd ff1b 	bl	80010b0 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d902      	bls.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	74fb      	strb	r3, [r7, #19]
            break;
 800328c:	e006      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ec      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10c      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b2:	4904      	ldr	r1, [pc, #16]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032ba:	e009      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	74bb      	strb	r3, [r7, #18]
 80032c0:	e006      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d0:	7c7b      	ldrb	r3, [r7, #17]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d105      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d6:	4b9e      	ldr	r3, [pc, #632]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	4a9d      	ldr	r2, [pc, #628]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ee:	4b98      	ldr	r3, [pc, #608]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f023 0203 	bic.w	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	4994      	ldr	r1, [pc, #592]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003310:	4b8f      	ldr	r3, [pc, #572]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f023 020c 	bic.w	r2, r3, #12
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	498c      	ldr	r1, [pc, #560]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003332:	4b87      	ldr	r3, [pc, #540]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	4983      	ldr	r1, [pc, #524]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003354:	4b7e      	ldr	r3, [pc, #504]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	497b      	ldr	r1, [pc, #492]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003376:	4b76      	ldr	r3, [pc, #472]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003384:	4972      	ldr	r1, [pc, #456]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003398:	4b6d      	ldr	r3, [pc, #436]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a6:	496a      	ldr	r1, [pc, #424]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033ba:	4b65      	ldr	r3, [pc, #404]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	4961      	ldr	r1, [pc, #388]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033dc:	4b5c      	ldr	r3, [pc, #368]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ea:	4959      	ldr	r1, [pc, #356]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033fe:	4b54      	ldr	r3, [pc, #336]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003404:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340c:	4950      	ldr	r1, [pc, #320]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003420:	4b4b      	ldr	r3, [pc, #300]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	4948      	ldr	r1, [pc, #288]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003442:	4b43      	ldr	r3, [pc, #268]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003450:	493f      	ldr	r1, [pc, #252]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d028      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003464:	4b3a      	ldr	r3, [pc, #232]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003472:	4937      	ldr	r1, [pc, #220]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800347e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003482:	d106      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003484:	4b32      	ldr	r3, [pc, #200]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	4a31      	ldr	r2, [pc, #196]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800348e:	60d3      	str	r3, [r2, #12]
 8003490:	e011      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003496:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800349a:	d10c      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3304      	adds	r3, #4
 80034a0:	2101      	movs	r1, #1
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f8c8 	bl	8003638 <RCCEx_PLLSAI1_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d028      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034c2:	4b23      	ldr	r3, [pc, #140]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	491f      	ldr	r1, [pc, #124]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034e0:	d106      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	4a1a      	ldr	r2, [pc, #104]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ec:	60d3      	str	r3, [r2, #12]
 80034ee:	e011      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	2101      	movs	r1, #1
 8003500:	4618      	mov	r0, r3
 8003502:	f000 f899 	bl	8003638 <RCCEx_PLLSAI1_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d02b      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352e:	4908      	ldr	r1, [pc, #32]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800353e:	d109      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a02      	ldr	r2, [pc, #8]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800354a:	60d3      	str	r3, [r2, #12]
 800354c:	e014      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800355c:	d10c      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	2101      	movs	r1, #1
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f867 	bl	8003638 <RCCEx_PLLSAI1_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d02f      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003584:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003592:	4928      	ldr	r1, [pc, #160]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800359e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035a2:	d10d      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	2102      	movs	r1, #2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 f844 	bl	8003638 <RCCEx_PLLSAI1_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d014      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035ba:	7cfb      	ldrb	r3, [r7, #19]
 80035bc:	74bb      	strb	r3, [r7, #18]
 80035be:	e011      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3320      	adds	r3, #32
 80035ce:	2102      	movs	r1, #2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 f925 	bl	8003820 <RCCEx_PLLSAI2_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035da:	7cfb      	ldrb	r3, [r7, #19]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035f0:	4b10      	ldr	r3, [pc, #64]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035fe:	490d      	ldr	r1, [pc, #52]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003612:	4b08      	ldr	r3, [pc, #32]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003618:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003622:	4904      	ldr	r1, [pc, #16]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800362a:	7cbb      	ldrb	r3, [r7, #18]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40021000 	.word	0x40021000

08003638 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003646:	4b75      	ldr	r3, [pc, #468]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d018      	beq.n	8003684 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003652:	4b72      	ldr	r3, [pc, #456]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0203 	and.w	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d10d      	bne.n	800367e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
       ||
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800366a:	4b6c      	ldr	r3, [pc, #432]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
       ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d047      	beq.n	800370e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
 8003682:	e044      	b.n	800370e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b03      	cmp	r3, #3
 800368a:	d018      	beq.n	80036be <RCCEx_PLLSAI1_Config+0x86>
 800368c:	2b03      	cmp	r3, #3
 800368e:	d825      	bhi.n	80036dc <RCCEx_PLLSAI1_Config+0xa4>
 8003690:	2b01      	cmp	r3, #1
 8003692:	d002      	beq.n	800369a <RCCEx_PLLSAI1_Config+0x62>
 8003694:	2b02      	cmp	r3, #2
 8003696:	d009      	beq.n	80036ac <RCCEx_PLLSAI1_Config+0x74>
 8003698:	e020      	b.n	80036dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800369a:	4b60      	ldr	r3, [pc, #384]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11d      	bne.n	80036e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036aa:	e01a      	b.n	80036e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036ac:	4b5b      	ldr	r3, [pc, #364]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d116      	bne.n	80036e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036bc:	e013      	b.n	80036e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036be:	4b57      	ldr	r3, [pc, #348]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036ca:	4b54      	ldr	r3, [pc, #336]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036da:	e006      	b.n	80036ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      break;
 80036e0:	e004      	b.n	80036ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036e2:	bf00      	nop
 80036e4:	e002      	b.n	80036ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036e6:	bf00      	nop
 80036e8:	e000      	b.n	80036ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10d      	bne.n	800370e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036f2:	4b4a      	ldr	r3, [pc, #296]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6819      	ldr	r1, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	3b01      	subs	r3, #1
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	430b      	orrs	r3, r1
 8003708:	4944      	ldr	r1, [pc, #272]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d17d      	bne.n	8003810 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003714:	4b41      	ldr	r3, [pc, #260]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a40      	ldr	r2, [pc, #256]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 800371a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800371e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003720:	f7fd fcc6 	bl	80010b0 <HAL_GetTick>
 8003724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003726:	e009      	b.n	800373c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003728:	f7fd fcc2 	bl	80010b0 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d902      	bls.n	800373c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	73fb      	strb	r3, [r7, #15]
        break;
 800373a:	e005      	b.n	8003748 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800373c:	4b37      	ldr	r3, [pc, #220]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1ef      	bne.n	8003728 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d160      	bne.n	8003810 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d111      	bne.n	8003778 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003754:	4b31      	ldr	r3, [pc, #196]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800375c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6892      	ldr	r2, [r2, #8]
 8003764:	0211      	lsls	r1, r2, #8
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68d2      	ldr	r2, [r2, #12]
 800376a:	0912      	lsrs	r2, r2, #4
 800376c:	0452      	lsls	r2, r2, #17
 800376e:	430a      	orrs	r2, r1
 8003770:	492a      	ldr	r1, [pc, #168]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003772:	4313      	orrs	r3, r2
 8003774:	610b      	str	r3, [r1, #16]
 8003776:	e027      	b.n	80037c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d112      	bne.n	80037a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800377e:	4b27      	ldr	r3, [pc, #156]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003786:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6892      	ldr	r2, [r2, #8]
 800378e:	0211      	lsls	r1, r2, #8
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6912      	ldr	r2, [r2, #16]
 8003794:	0852      	lsrs	r2, r2, #1
 8003796:	3a01      	subs	r2, #1
 8003798:	0552      	lsls	r2, r2, #21
 800379a:	430a      	orrs	r2, r1
 800379c:	491f      	ldr	r1, [pc, #124]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	610b      	str	r3, [r1, #16]
 80037a2:	e011      	b.n	80037c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037a4:	4b1d      	ldr	r3, [pc, #116]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6892      	ldr	r2, [r2, #8]
 80037b4:	0211      	lsls	r1, r2, #8
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6952      	ldr	r2, [r2, #20]
 80037ba:	0852      	lsrs	r2, r2, #1
 80037bc:	3a01      	subs	r2, #1
 80037be:	0652      	lsls	r2, r2, #25
 80037c0:	430a      	orrs	r2, r1
 80037c2:	4916      	ldr	r1, [pc, #88]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037c8:	4b14      	ldr	r3, [pc, #80]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a13      	ldr	r2, [pc, #76]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d4:	f7fd fc6c 	bl	80010b0 <HAL_GetTick>
 80037d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037da:	e009      	b.n	80037f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037dc:	f7fd fc68 	bl	80010b0 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d902      	bls.n	80037f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	73fb      	strb	r3, [r7, #15]
          break;
 80037ee:	e005      	b.n	80037fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0ef      	beq.n	80037dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	4904      	ldr	r1, [pc, #16]	; (800381c <RCCEx_PLLSAI1_Config+0x1e4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003810:	7bfb      	ldrb	r3, [r7, #15]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000

08003820 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800382e:	4b6a      	ldr	r3, [pc, #424]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d018      	beq.n	800386c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800383a:	4b67      	ldr	r3, [pc, #412]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f003 0203 	and.w	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d10d      	bne.n	8003866 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
       ||
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003852:	4b61      	ldr	r3, [pc, #388]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
       ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d047      	beq.n	80038f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
 800386a:	e044      	b.n	80038f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d018      	beq.n	80038a6 <RCCEx_PLLSAI2_Config+0x86>
 8003874:	2b03      	cmp	r3, #3
 8003876:	d825      	bhi.n	80038c4 <RCCEx_PLLSAI2_Config+0xa4>
 8003878:	2b01      	cmp	r3, #1
 800387a:	d002      	beq.n	8003882 <RCCEx_PLLSAI2_Config+0x62>
 800387c:	2b02      	cmp	r3, #2
 800387e:	d009      	beq.n	8003894 <RCCEx_PLLSAI2_Config+0x74>
 8003880:	e020      	b.n	80038c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003882:	4b55      	ldr	r3, [pc, #340]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d11d      	bne.n	80038ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003892:	e01a      	b.n	80038ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003894:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389c:	2b00      	cmp	r3, #0
 800389e:	d116      	bne.n	80038ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a4:	e013      	b.n	80038ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038a6:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10f      	bne.n	80038d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038b2:	4b49      	ldr	r3, [pc, #292]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038c2:	e006      	b.n	80038d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
      break;
 80038c8:	e004      	b.n	80038d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ca:	bf00      	nop
 80038cc:	e002      	b.n	80038d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10d      	bne.n	80038f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038da:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6819      	ldr	r1, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	430b      	orrs	r3, r1
 80038f0:	4939      	ldr	r1, [pc, #228]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d167      	bne.n	80039cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038fc:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a35      	ldr	r2, [pc, #212]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003908:	f7fd fbd2 	bl	80010b0 <HAL_GetTick>
 800390c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800390e:	e009      	b.n	8003924 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003910:	f7fd fbce 	bl	80010b0 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d902      	bls.n	8003924 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	73fb      	strb	r3, [r7, #15]
        break;
 8003922:	e005      	b.n	8003930 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003924:	4b2c      	ldr	r3, [pc, #176]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1ef      	bne.n	8003910 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d14a      	bne.n	80039cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d111      	bne.n	8003960 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800393c:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6892      	ldr	r2, [r2, #8]
 800394c:	0211      	lsls	r1, r2, #8
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68d2      	ldr	r2, [r2, #12]
 8003952:	0912      	lsrs	r2, r2, #4
 8003954:	0452      	lsls	r2, r2, #17
 8003956:	430a      	orrs	r2, r1
 8003958:	491f      	ldr	r1, [pc, #124]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395a:	4313      	orrs	r3, r2
 800395c:	614b      	str	r3, [r1, #20]
 800395e:	e011      	b.n	8003984 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003968:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6892      	ldr	r2, [r2, #8]
 8003970:	0211      	lsls	r1, r2, #8
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6912      	ldr	r2, [r2, #16]
 8003976:	0852      	lsrs	r2, r2, #1
 8003978:	3a01      	subs	r2, #1
 800397a:	0652      	lsls	r2, r2, #25
 800397c:	430a      	orrs	r2, r1
 800397e:	4916      	ldr	r1, [pc, #88]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003980:	4313      	orrs	r3, r2
 8003982:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003984:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800398a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003990:	f7fd fb8e 	bl	80010b0 <HAL_GetTick>
 8003994:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003996:	e009      	b.n	80039ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003998:	f7fd fb8a 	bl	80010b0 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d902      	bls.n	80039ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	73fb      	strb	r3, [r7, #15]
          break;
 80039aa:	e005      	b.n	80039b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ef      	beq.n	8003998 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c0:	695a      	ldr	r2, [r3, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	4904      	ldr	r1, [pc, #16]	; (80039d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40021000 	.word	0x40021000

080039dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e040      	b.n	8003a70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd fa14 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2224      	movs	r2, #36	; 0x24
 8003a08:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fb26 	bl	800406c <UART_SetConfig>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e022      	b.n	8003a70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fda4 	bl	8004580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fe2b 	bl	80046c4 <UART_CheckIdleState>
 8003a6e:	4603      	mov	r3, r0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	; 0x28
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	4613      	mov	r3, r2
 8003a86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	f040 8082 	bne.w	8003b96 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_UART_Transmit+0x26>
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e07a      	b.n	8003b98 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_UART_Transmit+0x38>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e073      	b.n	8003b98 <HAL_UART_Transmit+0x120>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2221      	movs	r2, #33	; 0x21
 8003ac4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ac6:	f7fd faf3 	bl	80010b0 <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	88fa      	ldrh	r2, [r7, #6]
 8003ad0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae4:	d108      	bne.n	8003af8 <HAL_UART_Transmit+0x80>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	e003      	b.n	8003b00 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b08:	e02d      	b.n	8003b66 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2200      	movs	r2, #0
 8003b12:	2180      	movs	r1, #128	; 0x80
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fe1e 	bl	8004756 <UART_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e039      	b.n	8003b98 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10b      	bne.n	8003b42 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	881a      	ldrh	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b36:	b292      	uxth	r2, r2
 8003b38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	3302      	adds	r3, #2
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	e008      	b.n	8003b54 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	781a      	ldrb	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	b292      	uxth	r2, r2
 8003b4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3301      	adds	r3, #1
 8003b52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1cb      	bne.n	8003b0a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2140      	movs	r1, #64	; 0x40
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fdea 	bl	8004756 <UART_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e005      	b.n	8003b98 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e000      	b.n	8003b98 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003b96:	2302      	movs	r3, #2
  }
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d131      	bne.n	8003c1a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_UART_Receive_IT+0x22>
 8003bbc:	88fb      	ldrh	r3, [r7, #6]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e02a      	b.n	8003c1c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_UART_Receive_IT+0x34>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e023      	b.n	8003c1c <HAL_UART_Receive_IT+0x7c>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <HAL_UART_Receive_IT+0x84>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00e      	beq.n	8003c0a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c08:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 fe1d 	bl	8004850 <UART_Start_Receive_IT>
 8003c16:	4603      	mov	r3, r0
 8003c18:	e000      	b.n	8003c1c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
  }
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40008000 	.word	0x40008000

08003c28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c4e:	4013      	ands	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d113      	bne.n	8003c80 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00e      	beq.n	8003c80 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d009      	beq.n	8003c80 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 81ce 	beq.w	8004012 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	4798      	blx	r3
      }
      return;
 8003c7e:	e1c8      	b.n	8004012 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80e3 	beq.w	8003e4e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d105      	bne.n	8003c9e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4ba6      	ldr	r3, [pc, #664]	; (8003f30 <HAL_UART_IRQHandler+0x308>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80d8 	beq.w	8003e4e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d010      	beq.n	8003cca <HAL_UART_IRQHandler+0xa2>
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d010      	beq.n	8003cf6 <HAL_UART_IRQHandler+0xce>
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00b      	beq.n	8003cf6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cec:	f043 0204 	orr.w	r2, r3, #4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d010      	beq.n	8003d22 <HAL_UART_IRQHandler+0xfa>
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2204      	movs	r2, #4
 8003d10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d18:	f043 0202 	orr.w	r2, r3, #2
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d015      	beq.n	8003d58 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d104      	bne.n	8003d40 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2208      	movs	r2, #8
 8003d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4e:	f043 0208 	orr.w	r2, r3, #8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d011      	beq.n	8003d86 <HAL_UART_IRQHandler+0x15e>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00c      	beq.n	8003d86 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 8142 	beq.w	8004016 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00c      	beq.n	8003db6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dbc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b40      	cmp	r3, #64	; 0x40
 8003dca:	d004      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d031      	beq.n	8003e3a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fdc2 	bl	8004960 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de6:	2b40      	cmp	r3, #64	; 0x40
 8003de8:	d123      	bne.n	8003e32 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d013      	beq.n	8003e2a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a4b      	ldr	r2, [pc, #300]	; (8003f34 <HAL_UART_IRQHandler+0x30c>)
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd fbc9 	bl	80015a6 <HAL_DMA_Abort_IT>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d017      	beq.n	8003e4a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003e24:	4610      	mov	r0, r2
 8003e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e00f      	b.n	8003e4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f908 	bl	8004040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	e00b      	b.n	8003e4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f904 	bl	8004040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e007      	b.n	8003e4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f900 	bl	8004040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003e48:	e0e5      	b.n	8004016 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4a:	bf00      	nop
    return;
 8003e4c:	e0e3      	b.n	8004016 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	f040 80a9 	bne.w	8003faa <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80a3 	beq.w	8003faa <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 809d 	beq.w	8003faa <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2210      	movs	r2, #16
 8003e76:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d158      	bne.n	8003f38 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8003e90:	893b      	ldrh	r3, [r7, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80c1 	beq.w	800401a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e9e:	893a      	ldrh	r2, [r7, #8]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	f080 80ba 	bcs.w	800401a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	893a      	ldrh	r2, [r7, #8]
 8003eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d12a      	bne.n	8003f14 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ecc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0201 	bic.w	r2, r2, #1
 8003edc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eec:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0210 	bic.w	r2, r2, #16
 8003f08:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fd fb0b 	bl	800152a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	4619      	mov	r1, r3
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f893 	bl	8004054 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f2e:	e074      	b.n	800401a <HAL_UART_IRQHandler+0x3f2>
 8003f30:	04000120 	.word	0x04000120
 8003f34:	080049bf 	.word	0x080049bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d063      	beq.n	800401e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8003f56:	897b      	ldrh	r3, [r7, #10]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d060      	beq.n	800401e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f6a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0201 	bic.w	r2, r2, #1
 8003f7a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0210 	bic.w	r2, r2, #16
 8003f9c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f9e:	897b      	ldrh	r3, [r7, #10]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f856 	bl	8004054 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003fa8:	e039      	b.n	800401e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00d      	beq.n	8003fd0 <HAL_UART_IRQHandler+0x3a8>
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d008      	beq.n	8003fd0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fdff 	bl	8004bcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fce:	e029      	b.n	8004024 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00d      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01a      	beq.n	8004022 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
    }
    return;
 8003ff4:	e015      	b.n	8004022 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d011      	beq.n	8004024 <HAL_UART_IRQHandler+0x3fc>
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00c      	beq.n	8004024 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fced 	bl	80049ea <UART_EndTransmit_IT>
    return;
 8004010:	e008      	b.n	8004024 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004012:	bf00      	nop
 8004014:	e006      	b.n	8004024 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004016:	bf00      	nop
 8004018:	e004      	b.n	8004024 <HAL_UART_IRQHandler+0x3fc>
      return;
 800401a:	bf00      	nop
 800401c:	e002      	b.n	8004024 <HAL_UART_IRQHandler+0x3fc>
      return;
 800401e:	bf00      	nop
 8004020:	e000      	b.n	8004024 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004022:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop

0800402c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800406c:	b5b0      	push	{r4, r5, r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	4313      	orrs	r3, r2
 800408e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4bad      	ldr	r3, [pc, #692]	; (800434c <UART_SetConfig+0x2e0>)
 8004098:	4013      	ands	r3, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	69f9      	ldr	r1, [r7, #28]
 80040a0:	430b      	orrs	r3, r1
 80040a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4aa2      	ldr	r2, [pc, #648]	; (8004350 <UART_SetConfig+0x2e4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a99      	ldr	r2, [pc, #612]	; (8004354 <UART_SetConfig+0x2e8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d121      	bne.n	8004136 <UART_SetConfig+0xca>
 80040f2:	4b99      	ldr	r3, [pc, #612]	; (8004358 <UART_SetConfig+0x2ec>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d817      	bhi.n	8004130 <UART_SetConfig+0xc4>
 8004100:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <UART_SetConfig+0x9c>)
 8004102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004106:	bf00      	nop
 8004108:	08004119 	.word	0x08004119
 800410c:	08004125 	.word	0x08004125
 8004110:	0800411f 	.word	0x0800411f
 8004114:	0800412b 	.word	0x0800412b
 8004118:	2301      	movs	r3, #1
 800411a:	76fb      	strb	r3, [r7, #27]
 800411c:	e0e7      	b.n	80042ee <UART_SetConfig+0x282>
 800411e:	2302      	movs	r3, #2
 8004120:	76fb      	strb	r3, [r7, #27]
 8004122:	e0e4      	b.n	80042ee <UART_SetConfig+0x282>
 8004124:	2304      	movs	r3, #4
 8004126:	76fb      	strb	r3, [r7, #27]
 8004128:	e0e1      	b.n	80042ee <UART_SetConfig+0x282>
 800412a:	2308      	movs	r3, #8
 800412c:	76fb      	strb	r3, [r7, #27]
 800412e:	e0de      	b.n	80042ee <UART_SetConfig+0x282>
 8004130:	2310      	movs	r3, #16
 8004132:	76fb      	strb	r3, [r7, #27]
 8004134:	e0db      	b.n	80042ee <UART_SetConfig+0x282>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a88      	ldr	r2, [pc, #544]	; (800435c <UART_SetConfig+0x2f0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d132      	bne.n	80041a6 <UART_SetConfig+0x13a>
 8004140:	4b85      	ldr	r3, [pc, #532]	; (8004358 <UART_SetConfig+0x2ec>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b0c      	cmp	r3, #12
 800414c:	d828      	bhi.n	80041a0 <UART_SetConfig+0x134>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <UART_SetConfig+0xe8>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004189 	.word	0x08004189
 8004158:	080041a1 	.word	0x080041a1
 800415c:	080041a1 	.word	0x080041a1
 8004160:	080041a1 	.word	0x080041a1
 8004164:	08004195 	.word	0x08004195
 8004168:	080041a1 	.word	0x080041a1
 800416c:	080041a1 	.word	0x080041a1
 8004170:	080041a1 	.word	0x080041a1
 8004174:	0800418f 	.word	0x0800418f
 8004178:	080041a1 	.word	0x080041a1
 800417c:	080041a1 	.word	0x080041a1
 8004180:	080041a1 	.word	0x080041a1
 8004184:	0800419b 	.word	0x0800419b
 8004188:	2300      	movs	r3, #0
 800418a:	76fb      	strb	r3, [r7, #27]
 800418c:	e0af      	b.n	80042ee <UART_SetConfig+0x282>
 800418e:	2302      	movs	r3, #2
 8004190:	76fb      	strb	r3, [r7, #27]
 8004192:	e0ac      	b.n	80042ee <UART_SetConfig+0x282>
 8004194:	2304      	movs	r3, #4
 8004196:	76fb      	strb	r3, [r7, #27]
 8004198:	e0a9      	b.n	80042ee <UART_SetConfig+0x282>
 800419a:	2308      	movs	r3, #8
 800419c:	76fb      	strb	r3, [r7, #27]
 800419e:	e0a6      	b.n	80042ee <UART_SetConfig+0x282>
 80041a0:	2310      	movs	r3, #16
 80041a2:	76fb      	strb	r3, [r7, #27]
 80041a4:	e0a3      	b.n	80042ee <UART_SetConfig+0x282>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a6d      	ldr	r2, [pc, #436]	; (8004360 <UART_SetConfig+0x2f4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d120      	bne.n	80041f2 <UART_SetConfig+0x186>
 80041b0:	4b69      	ldr	r3, [pc, #420]	; (8004358 <UART_SetConfig+0x2ec>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041ba:	2b30      	cmp	r3, #48	; 0x30
 80041bc:	d013      	beq.n	80041e6 <UART_SetConfig+0x17a>
 80041be:	2b30      	cmp	r3, #48	; 0x30
 80041c0:	d814      	bhi.n	80041ec <UART_SetConfig+0x180>
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	d009      	beq.n	80041da <UART_SetConfig+0x16e>
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d810      	bhi.n	80041ec <UART_SetConfig+0x180>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <UART_SetConfig+0x168>
 80041ce:	2b10      	cmp	r3, #16
 80041d0:	d006      	beq.n	80041e0 <UART_SetConfig+0x174>
 80041d2:	e00b      	b.n	80041ec <UART_SetConfig+0x180>
 80041d4:	2300      	movs	r3, #0
 80041d6:	76fb      	strb	r3, [r7, #27]
 80041d8:	e089      	b.n	80042ee <UART_SetConfig+0x282>
 80041da:	2302      	movs	r3, #2
 80041dc:	76fb      	strb	r3, [r7, #27]
 80041de:	e086      	b.n	80042ee <UART_SetConfig+0x282>
 80041e0:	2304      	movs	r3, #4
 80041e2:	76fb      	strb	r3, [r7, #27]
 80041e4:	e083      	b.n	80042ee <UART_SetConfig+0x282>
 80041e6:	2308      	movs	r3, #8
 80041e8:	76fb      	strb	r3, [r7, #27]
 80041ea:	e080      	b.n	80042ee <UART_SetConfig+0x282>
 80041ec:	2310      	movs	r3, #16
 80041ee:	76fb      	strb	r3, [r7, #27]
 80041f0:	e07d      	b.n	80042ee <UART_SetConfig+0x282>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a5b      	ldr	r2, [pc, #364]	; (8004364 <UART_SetConfig+0x2f8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d120      	bne.n	800423e <UART_SetConfig+0x1d2>
 80041fc:	4b56      	ldr	r3, [pc, #344]	; (8004358 <UART_SetConfig+0x2ec>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004206:	2bc0      	cmp	r3, #192	; 0xc0
 8004208:	d013      	beq.n	8004232 <UART_SetConfig+0x1c6>
 800420a:	2bc0      	cmp	r3, #192	; 0xc0
 800420c:	d814      	bhi.n	8004238 <UART_SetConfig+0x1cc>
 800420e:	2b80      	cmp	r3, #128	; 0x80
 8004210:	d009      	beq.n	8004226 <UART_SetConfig+0x1ba>
 8004212:	2b80      	cmp	r3, #128	; 0x80
 8004214:	d810      	bhi.n	8004238 <UART_SetConfig+0x1cc>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <UART_SetConfig+0x1b4>
 800421a:	2b40      	cmp	r3, #64	; 0x40
 800421c:	d006      	beq.n	800422c <UART_SetConfig+0x1c0>
 800421e:	e00b      	b.n	8004238 <UART_SetConfig+0x1cc>
 8004220:	2300      	movs	r3, #0
 8004222:	76fb      	strb	r3, [r7, #27]
 8004224:	e063      	b.n	80042ee <UART_SetConfig+0x282>
 8004226:	2302      	movs	r3, #2
 8004228:	76fb      	strb	r3, [r7, #27]
 800422a:	e060      	b.n	80042ee <UART_SetConfig+0x282>
 800422c:	2304      	movs	r3, #4
 800422e:	76fb      	strb	r3, [r7, #27]
 8004230:	e05d      	b.n	80042ee <UART_SetConfig+0x282>
 8004232:	2308      	movs	r3, #8
 8004234:	76fb      	strb	r3, [r7, #27]
 8004236:	e05a      	b.n	80042ee <UART_SetConfig+0x282>
 8004238:	2310      	movs	r3, #16
 800423a:	76fb      	strb	r3, [r7, #27]
 800423c:	e057      	b.n	80042ee <UART_SetConfig+0x282>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a49      	ldr	r2, [pc, #292]	; (8004368 <UART_SetConfig+0x2fc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d125      	bne.n	8004294 <UART_SetConfig+0x228>
 8004248:	4b43      	ldr	r3, [pc, #268]	; (8004358 <UART_SetConfig+0x2ec>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004256:	d017      	beq.n	8004288 <UART_SetConfig+0x21c>
 8004258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800425c:	d817      	bhi.n	800428e <UART_SetConfig+0x222>
 800425e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004262:	d00b      	beq.n	800427c <UART_SetConfig+0x210>
 8004264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004268:	d811      	bhi.n	800428e <UART_SetConfig+0x222>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <UART_SetConfig+0x20a>
 800426e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004272:	d006      	beq.n	8004282 <UART_SetConfig+0x216>
 8004274:	e00b      	b.n	800428e <UART_SetConfig+0x222>
 8004276:	2300      	movs	r3, #0
 8004278:	76fb      	strb	r3, [r7, #27]
 800427a:	e038      	b.n	80042ee <UART_SetConfig+0x282>
 800427c:	2302      	movs	r3, #2
 800427e:	76fb      	strb	r3, [r7, #27]
 8004280:	e035      	b.n	80042ee <UART_SetConfig+0x282>
 8004282:	2304      	movs	r3, #4
 8004284:	76fb      	strb	r3, [r7, #27]
 8004286:	e032      	b.n	80042ee <UART_SetConfig+0x282>
 8004288:	2308      	movs	r3, #8
 800428a:	76fb      	strb	r3, [r7, #27]
 800428c:	e02f      	b.n	80042ee <UART_SetConfig+0x282>
 800428e:	2310      	movs	r3, #16
 8004290:	76fb      	strb	r3, [r7, #27]
 8004292:	e02c      	b.n	80042ee <UART_SetConfig+0x282>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a2d      	ldr	r2, [pc, #180]	; (8004350 <UART_SetConfig+0x2e4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d125      	bne.n	80042ea <UART_SetConfig+0x27e>
 800429e:	4b2e      	ldr	r3, [pc, #184]	; (8004358 <UART_SetConfig+0x2ec>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ac:	d017      	beq.n	80042de <UART_SetConfig+0x272>
 80042ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042b2:	d817      	bhi.n	80042e4 <UART_SetConfig+0x278>
 80042b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b8:	d00b      	beq.n	80042d2 <UART_SetConfig+0x266>
 80042ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042be:	d811      	bhi.n	80042e4 <UART_SetConfig+0x278>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <UART_SetConfig+0x260>
 80042c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c8:	d006      	beq.n	80042d8 <UART_SetConfig+0x26c>
 80042ca:	e00b      	b.n	80042e4 <UART_SetConfig+0x278>
 80042cc:	2300      	movs	r3, #0
 80042ce:	76fb      	strb	r3, [r7, #27]
 80042d0:	e00d      	b.n	80042ee <UART_SetConfig+0x282>
 80042d2:	2302      	movs	r3, #2
 80042d4:	76fb      	strb	r3, [r7, #27]
 80042d6:	e00a      	b.n	80042ee <UART_SetConfig+0x282>
 80042d8:	2304      	movs	r3, #4
 80042da:	76fb      	strb	r3, [r7, #27]
 80042dc:	e007      	b.n	80042ee <UART_SetConfig+0x282>
 80042de:	2308      	movs	r3, #8
 80042e0:	76fb      	strb	r3, [r7, #27]
 80042e2:	e004      	b.n	80042ee <UART_SetConfig+0x282>
 80042e4:	2310      	movs	r3, #16
 80042e6:	76fb      	strb	r3, [r7, #27]
 80042e8:	e001      	b.n	80042ee <UART_SetConfig+0x282>
 80042ea:	2310      	movs	r3, #16
 80042ec:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a17      	ldr	r2, [pc, #92]	; (8004350 <UART_SetConfig+0x2e4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	f040 8087 	bne.w	8004408 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042fa:	7efb      	ldrb	r3, [r7, #27]
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d837      	bhi.n	8004370 <UART_SetConfig+0x304>
 8004300:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <UART_SetConfig+0x29c>)
 8004302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004306:	bf00      	nop
 8004308:	0800432d 	.word	0x0800432d
 800430c:	08004371 	.word	0x08004371
 8004310:	08004335 	.word	0x08004335
 8004314:	08004371 	.word	0x08004371
 8004318:	0800433b 	.word	0x0800433b
 800431c:	08004371 	.word	0x08004371
 8004320:	08004371 	.word	0x08004371
 8004324:	08004371 	.word	0x08004371
 8004328:	08004343 	.word	0x08004343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800432c:	f7fe fe0e 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8004330:	6178      	str	r0, [r7, #20]
        break;
 8004332:	e022      	b.n	800437a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004334:	4b0d      	ldr	r3, [pc, #52]	; (800436c <UART_SetConfig+0x300>)
 8004336:	617b      	str	r3, [r7, #20]
        break;
 8004338:	e01f      	b.n	800437a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800433a:	f7fe fd6f 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 800433e:	6178      	str	r0, [r7, #20]
        break;
 8004340:	e01b      	b.n	800437a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004346:	617b      	str	r3, [r7, #20]
        break;
 8004348:	e017      	b.n	800437a <UART_SetConfig+0x30e>
 800434a:	bf00      	nop
 800434c:	efff69f3 	.word	0xefff69f3
 8004350:	40008000 	.word	0x40008000
 8004354:	40013800 	.word	0x40013800
 8004358:	40021000 	.word	0x40021000
 800435c:	40004400 	.word	0x40004400
 8004360:	40004800 	.word	0x40004800
 8004364:	40004c00 	.word	0x40004c00
 8004368:	40005000 	.word	0x40005000
 800436c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	76bb      	strb	r3, [r7, #26]
        break;
 8004378:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80f1 	beq.w	8004564 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	4413      	add	r3, r2
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	429a      	cmp	r2, r3
 8004390:	d305      	bcc.n	800439e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	429a      	cmp	r2, r3
 800439c:	d902      	bls.n	80043a4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	76bb      	strb	r3, [r7, #26]
 80043a2:	e0df      	b.n	8004564 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f04f 0100 	mov.w	r1, #0
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	020b      	lsls	r3, r1, #8
 80043b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043ba:	0202      	lsls	r2, r0, #8
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	6849      	ldr	r1, [r1, #4]
 80043c0:	0849      	lsrs	r1, r1, #1
 80043c2:	4608      	mov	r0, r1
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	1814      	adds	r4, r2, r0
 80043ca:	eb43 0501 	adc.w	r5, r3, r1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	4620      	mov	r0, r4
 80043da:	4629      	mov	r1, r5
 80043dc:	f7fb ff48 	bl	8000270 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4613      	mov	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ee:	d308      	bcc.n	8004402 <UART_SetConfig+0x396>
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f6:	d204      	bcs.n	8004402 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	60da      	str	r2, [r3, #12]
 8004400:	e0b0      	b.n	8004564 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	76bb      	strb	r3, [r7, #26]
 8004406:	e0ad      	b.n	8004564 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004410:	d15c      	bne.n	80044cc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004412:	7efb      	ldrb	r3, [r7, #27]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d828      	bhi.n	800446a <UART_SetConfig+0x3fe>
 8004418:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <UART_SetConfig+0x3b4>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	08004445 	.word	0x08004445
 8004424:	0800444d 	.word	0x0800444d
 8004428:	08004455 	.word	0x08004455
 800442c:	0800446b 	.word	0x0800446b
 8004430:	0800445b 	.word	0x0800445b
 8004434:	0800446b 	.word	0x0800446b
 8004438:	0800446b 	.word	0x0800446b
 800443c:	0800446b 	.word	0x0800446b
 8004440:	08004463 	.word	0x08004463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004444:	f7fe fd82 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8004448:	6178      	str	r0, [r7, #20]
        break;
 800444a:	e013      	b.n	8004474 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800444c:	f7fe fd94 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 8004450:	6178      	str	r0, [r7, #20]
        break;
 8004452:	e00f      	b.n	8004474 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004454:	4b49      	ldr	r3, [pc, #292]	; (800457c <UART_SetConfig+0x510>)
 8004456:	617b      	str	r3, [r7, #20]
        break;
 8004458:	e00c      	b.n	8004474 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445a:	f7fe fcdf 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 800445e:	6178      	str	r0, [r7, #20]
        break;
 8004460:	e008      	b.n	8004474 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004466:	617b      	str	r3, [r7, #20]
        break;
 8004468:	e004      	b.n	8004474 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	76bb      	strb	r3, [r7, #26]
        break;
 8004472:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d074      	beq.n	8004564 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	005a      	lsls	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	441a      	add	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	fbb2 f3f3 	udiv	r3, r2, r3
 800448e:	b29b      	uxth	r3, r3
 8004490:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2b0f      	cmp	r3, #15
 8004496:	d916      	bls.n	80044c6 <UART_SetConfig+0x45a>
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449e:	d212      	bcs.n	80044c6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f023 030f 	bic.w	r3, r3, #15
 80044a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	085b      	lsrs	r3, r3, #1
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	89fb      	ldrh	r3, [r7, #14]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	89fa      	ldrh	r2, [r7, #14]
 80044c2:	60da      	str	r2, [r3, #12]
 80044c4:	e04e      	b.n	8004564 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	76bb      	strb	r3, [r7, #26]
 80044ca:	e04b      	b.n	8004564 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044cc:	7efb      	ldrb	r3, [r7, #27]
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d827      	bhi.n	8004522 <UART_SetConfig+0x4b6>
 80044d2:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <UART_SetConfig+0x46c>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	080044fd 	.word	0x080044fd
 80044dc:	08004505 	.word	0x08004505
 80044e0:	0800450d 	.word	0x0800450d
 80044e4:	08004523 	.word	0x08004523
 80044e8:	08004513 	.word	0x08004513
 80044ec:	08004523 	.word	0x08004523
 80044f0:	08004523 	.word	0x08004523
 80044f4:	08004523 	.word	0x08004523
 80044f8:	0800451b 	.word	0x0800451b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044fc:	f7fe fd26 	bl	8002f4c <HAL_RCC_GetPCLK1Freq>
 8004500:	6178      	str	r0, [r7, #20]
        break;
 8004502:	e013      	b.n	800452c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004504:	f7fe fd38 	bl	8002f78 <HAL_RCC_GetPCLK2Freq>
 8004508:	6178      	str	r0, [r7, #20]
        break;
 800450a:	e00f      	b.n	800452c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800450c:	4b1b      	ldr	r3, [pc, #108]	; (800457c <UART_SetConfig+0x510>)
 800450e:	617b      	str	r3, [r7, #20]
        break;
 8004510:	e00c      	b.n	800452c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004512:	f7fe fc83 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8004516:	6178      	str	r0, [r7, #20]
        break;
 8004518:	e008      	b.n	800452c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800451a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451e:	617b      	str	r3, [r7, #20]
        break;
 8004520:	e004      	b.n	800452c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	76bb      	strb	r3, [r7, #26]
        break;
 800452a:	bf00      	nop
    }

    if (pclk != 0U)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d018      	beq.n	8004564 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	085a      	lsrs	r2, r3, #1
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	441a      	add	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	b29b      	uxth	r3, r3
 8004546:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b0f      	cmp	r3, #15
 800454c:	d908      	bls.n	8004560 <UART_SetConfig+0x4f4>
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004554:	d204      	bcs.n	8004560 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	60da      	str	r2, [r3, #12]
 800455e:	e001      	b.n	8004564 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004570:	7ebb      	ldrb	r3, [r7, #26]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3720      	adds	r7, #32
 8004576:	46bd      	mov	sp, r7
 8004578:	bdb0      	pop	{r4, r5, r7, pc}
 800457a:	bf00      	nop
 800457c:	00f42400 	.word	0x00f42400

08004580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01a      	beq.n	8004696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800467e:	d10a      	bne.n	8004696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	605a      	str	r2, [r3, #4]
  }
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046d4:	f7fc fcec 	bl	80010b0 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d10e      	bne.n	8004706 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f82d 	bl	8004756 <UART_WaitOnFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e023      	b.n	800474e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b04      	cmp	r3, #4
 8004712:	d10e      	bne.n	8004732 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f817 	bl	8004756 <UART_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e00d      	b.n	800474e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	603b      	str	r3, [r7, #0]
 8004762:	4613      	mov	r3, r2
 8004764:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004766:	e05e      	b.n	8004826 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800476e:	d05a      	beq.n	8004826 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004770:	f7fc fc9e 	bl	80010b0 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	429a      	cmp	r2, r3
 800477e:	d302      	bcc.n	8004786 <UART_WaitOnFlagUntilTimeout+0x30>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d11b      	bne.n	80047be <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004794:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0201 	bic.w	r2, r2, #1
 80047a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2220      	movs	r2, #32
 80047aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e043      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d02c      	beq.n	8004826 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047da:	d124      	bne.n	8004826 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047e4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0201 	bic.w	r2, r2, #1
 8004804:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e00f      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4013      	ands	r3, r2
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	429a      	cmp	r2, r3
 8004834:	bf0c      	ite	eq
 8004836:	2301      	moveq	r3, #1
 8004838:	2300      	movne	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	429a      	cmp	r2, r3
 8004842:	d091      	beq.n	8004768 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	4613      	mov	r3, r2
 800485c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	88fa      	ldrh	r2, [r7, #6]
 8004868:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004882:	d10e      	bne.n	80048a2 <UART_Start_Receive_IT+0x52>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d105      	bne.n	8004898 <UART_Start_Receive_IT+0x48>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004892:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004896:	e02d      	b.n	80048f4 <UART_Start_Receive_IT+0xa4>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	22ff      	movs	r2, #255	; 0xff
 800489c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048a0:	e028      	b.n	80048f4 <UART_Start_Receive_IT+0xa4>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10d      	bne.n	80048c6 <UART_Start_Receive_IT+0x76>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d104      	bne.n	80048bc <UART_Start_Receive_IT+0x6c>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	22ff      	movs	r2, #255	; 0xff
 80048b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048ba:	e01b      	b.n	80048f4 <UART_Start_Receive_IT+0xa4>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	227f      	movs	r2, #127	; 0x7f
 80048c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048c4:	e016      	b.n	80048f4 <UART_Start_Receive_IT+0xa4>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ce:	d10d      	bne.n	80048ec <UART_Start_Receive_IT+0x9c>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d104      	bne.n	80048e2 <UART_Start_Receive_IT+0x92>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	227f      	movs	r2, #127	; 0x7f
 80048dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048e0:	e008      	b.n	80048f4 <UART_Start_Receive_IT+0xa4>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	223f      	movs	r2, #63	; 0x3f
 80048e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048ea:	e003      	b.n	80048f4 <UART_Start_Receive_IT+0xa4>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2222      	movs	r2, #34	; 0x22
 8004900:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491a:	d107      	bne.n	800492c <UART_Start_Receive_IT+0xdc>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a0c      	ldr	r2, [pc, #48]	; (8004958 <UART_Start_Receive_IT+0x108>)
 8004928:	665a      	str	r2, [r3, #100]	; 0x64
 800492a:	e002      	b.n	8004932 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a0b      	ldr	r2, [pc, #44]	; (800495c <UART_Start_Receive_IT+0x10c>)
 8004930:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004948:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	08004af5 	.word	0x08004af5
 800495c:	08004a1d 	.word	0x08004a1d

08004960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004976:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0201 	bic.w	r2, r2, #1
 8004986:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498c:	2b01      	cmp	r3, #1
 800498e:	d107      	bne.n	80049a0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0210 	bic.w	r2, r2, #16
 800499e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f7ff fb2f 	bl	8004040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049e2:	bf00      	nop
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a00:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff fb0c 	bl	800402c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a2a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a30:	2b22      	cmp	r3, #34	; 0x22
 8004a32:	d151      	bne.n	8004ad8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a3a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a3c:	89bb      	ldrh	r3, [r7, #12]
 8004a3e:	b2d9      	uxtb	r1, r3
 8004a40:	89fb      	ldrh	r3, [r7, #14]
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	400a      	ands	r2, r1
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d13a      	bne.n	8004aec <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a84:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0201 	bic.w	r2, r2, #1
 8004a94:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d10f      	bne.n	8004aca <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0210 	bic.w	r2, r2, #16
 8004ab8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff fac6 	bl	8004054 <HAL_UARTEx_RxEventCallback>
 8004ac8:	e002      	b.n	8004ad0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fb ffe8 	bl	8000aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ad6:	e009      	b.n	8004aec <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	8b1b      	ldrh	r3, [r3, #24]
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0208 	orr.w	r2, r2, #8
 8004ae8:	b292      	uxth	r2, r2
 8004aea:	831a      	strh	r2, [r3, #24]
}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b02:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b08:	2b22      	cmp	r3, #34	; 0x22
 8004b0a:	d151      	bne.n	8004bb0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b12:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b18:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004b1a:	89ba      	ldrh	r2, [r7, #12]
 8004b1c:	89fb      	ldrh	r3, [r7, #14]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	1c9a      	adds	r2, r3, #2
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d13a      	bne.n	8004bc4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b5c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0201 	bic.w	r2, r2, #1
 8004b6c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d10f      	bne.n	8004ba2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0210 	bic.w	r2, r2, #16
 8004b90:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff fa5a 	bl	8004054 <HAL_UARTEx_RxEventCallback>
 8004ba0:	e002      	b.n	8004ba8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fb ff7c 	bl	8000aa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bae:	e009      	b.n	8004bc4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	8b1b      	ldrh	r3, [r3, #24]
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0208 	orr.w	r2, r2, #8
 8004bc0:	b292      	uxth	r2, r2
 8004bc2:	831a      	strh	r2, [r3, #24]
}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <__errno>:
 8004be0:	4b01      	ldr	r3, [pc, #4]	; (8004be8 <__errno+0x8>)
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20000018 	.word	0x20000018

08004bec <__libc_init_array>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	4d0d      	ldr	r5, [pc, #52]	; (8004c24 <__libc_init_array+0x38>)
 8004bf0:	4c0d      	ldr	r4, [pc, #52]	; (8004c28 <__libc_init_array+0x3c>)
 8004bf2:	1b64      	subs	r4, r4, r5
 8004bf4:	10a4      	asrs	r4, r4, #2
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	42a6      	cmp	r6, r4
 8004bfa:	d109      	bne.n	8004c10 <__libc_init_array+0x24>
 8004bfc:	4d0b      	ldr	r5, [pc, #44]	; (8004c2c <__libc_init_array+0x40>)
 8004bfe:	4c0c      	ldr	r4, [pc, #48]	; (8004c30 <__libc_init_array+0x44>)
 8004c00:	f000 ffec 	bl	8005bdc <_init>
 8004c04:	1b64      	subs	r4, r4, r5
 8004c06:	10a4      	asrs	r4, r4, #2
 8004c08:	2600      	movs	r6, #0
 8004c0a:	42a6      	cmp	r6, r4
 8004c0c:	d105      	bne.n	8004c1a <__libc_init_array+0x2e>
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c14:	4798      	blx	r3
 8004c16:	3601      	adds	r6, #1
 8004c18:	e7ee      	b.n	8004bf8 <__libc_init_array+0xc>
 8004c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1e:	4798      	blx	r3
 8004c20:	3601      	adds	r6, #1
 8004c22:	e7f2      	b.n	8004c0a <__libc_init_array+0x1e>
 8004c24:	08005d38 	.word	0x08005d38
 8004c28:	08005d38 	.word	0x08005d38
 8004c2c:	08005d38 	.word	0x08005d38
 8004c30:	08005d3c 	.word	0x08005d3c

08004c34 <memset>:
 8004c34:	4402      	add	r2, r0
 8004c36:	4603      	mov	r3, r0
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d100      	bne.n	8004c3e <memset+0xa>
 8004c3c:	4770      	bx	lr
 8004c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c42:	e7f9      	b.n	8004c38 <memset+0x4>

08004c44 <_free_r>:
 8004c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c46:	2900      	cmp	r1, #0
 8004c48:	d048      	beq.n	8004cdc <_free_r+0x98>
 8004c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c4e:	9001      	str	r0, [sp, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f1a1 0404 	sub.w	r4, r1, #4
 8004c56:	bfb8      	it	lt
 8004c58:	18e4      	addlt	r4, r4, r3
 8004c5a:	f000 fc19 	bl	8005490 <__malloc_lock>
 8004c5e:	4a20      	ldr	r2, [pc, #128]	; (8004ce0 <_free_r+0x9c>)
 8004c60:	9801      	ldr	r0, [sp, #4]
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	4615      	mov	r5, r2
 8004c66:	b933      	cbnz	r3, 8004c76 <_free_r+0x32>
 8004c68:	6063      	str	r3, [r4, #4]
 8004c6a:	6014      	str	r4, [r2, #0]
 8004c6c:	b003      	add	sp, #12
 8004c6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c72:	f000 bc13 	b.w	800549c <__malloc_unlock>
 8004c76:	42a3      	cmp	r3, r4
 8004c78:	d90b      	bls.n	8004c92 <_free_r+0x4e>
 8004c7a:	6821      	ldr	r1, [r4, #0]
 8004c7c:	1862      	adds	r2, r4, r1
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	bf04      	itt	eq
 8004c82:	681a      	ldreq	r2, [r3, #0]
 8004c84:	685b      	ldreq	r3, [r3, #4]
 8004c86:	6063      	str	r3, [r4, #4]
 8004c88:	bf04      	itt	eq
 8004c8a:	1852      	addeq	r2, r2, r1
 8004c8c:	6022      	streq	r2, [r4, #0]
 8004c8e:	602c      	str	r4, [r5, #0]
 8004c90:	e7ec      	b.n	8004c6c <_free_r+0x28>
 8004c92:	461a      	mov	r2, r3
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	b10b      	cbz	r3, 8004c9c <_free_r+0x58>
 8004c98:	42a3      	cmp	r3, r4
 8004c9a:	d9fa      	bls.n	8004c92 <_free_r+0x4e>
 8004c9c:	6811      	ldr	r1, [r2, #0]
 8004c9e:	1855      	adds	r5, r2, r1
 8004ca0:	42a5      	cmp	r5, r4
 8004ca2:	d10b      	bne.n	8004cbc <_free_r+0x78>
 8004ca4:	6824      	ldr	r4, [r4, #0]
 8004ca6:	4421      	add	r1, r4
 8004ca8:	1854      	adds	r4, r2, r1
 8004caa:	42a3      	cmp	r3, r4
 8004cac:	6011      	str	r1, [r2, #0]
 8004cae:	d1dd      	bne.n	8004c6c <_free_r+0x28>
 8004cb0:	681c      	ldr	r4, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	6053      	str	r3, [r2, #4]
 8004cb6:	4421      	add	r1, r4
 8004cb8:	6011      	str	r1, [r2, #0]
 8004cba:	e7d7      	b.n	8004c6c <_free_r+0x28>
 8004cbc:	d902      	bls.n	8004cc4 <_free_r+0x80>
 8004cbe:	230c      	movs	r3, #12
 8004cc0:	6003      	str	r3, [r0, #0]
 8004cc2:	e7d3      	b.n	8004c6c <_free_r+0x28>
 8004cc4:	6825      	ldr	r5, [r4, #0]
 8004cc6:	1961      	adds	r1, r4, r5
 8004cc8:	428b      	cmp	r3, r1
 8004cca:	bf04      	itt	eq
 8004ccc:	6819      	ldreq	r1, [r3, #0]
 8004cce:	685b      	ldreq	r3, [r3, #4]
 8004cd0:	6063      	str	r3, [r4, #4]
 8004cd2:	bf04      	itt	eq
 8004cd4:	1949      	addeq	r1, r1, r5
 8004cd6:	6021      	streq	r1, [r4, #0]
 8004cd8:	6054      	str	r4, [r2, #4]
 8004cda:	e7c7      	b.n	8004c6c <_free_r+0x28>
 8004cdc:	b003      	add	sp, #12
 8004cde:	bd30      	pop	{r4, r5, pc}
 8004ce0:	200000a0 	.word	0x200000a0

08004ce4 <_malloc_r>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	1ccd      	adds	r5, r1, #3
 8004ce8:	f025 0503 	bic.w	r5, r5, #3
 8004cec:	3508      	adds	r5, #8
 8004cee:	2d0c      	cmp	r5, #12
 8004cf0:	bf38      	it	cc
 8004cf2:	250c      	movcc	r5, #12
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	db01      	blt.n	8004cfe <_malloc_r+0x1a>
 8004cfa:	42a9      	cmp	r1, r5
 8004cfc:	d903      	bls.n	8004d06 <_malloc_r+0x22>
 8004cfe:	230c      	movs	r3, #12
 8004d00:	6033      	str	r3, [r6, #0]
 8004d02:	2000      	movs	r0, #0
 8004d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d06:	f000 fbc3 	bl	8005490 <__malloc_lock>
 8004d0a:	4921      	ldr	r1, [pc, #132]	; (8004d90 <_malloc_r+0xac>)
 8004d0c:	680a      	ldr	r2, [r1, #0]
 8004d0e:	4614      	mov	r4, r2
 8004d10:	b99c      	cbnz	r4, 8004d3a <_malloc_r+0x56>
 8004d12:	4f20      	ldr	r7, [pc, #128]	; (8004d94 <_malloc_r+0xb0>)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	b923      	cbnz	r3, 8004d22 <_malloc_r+0x3e>
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	f000 f8ca 	bl	8004eb4 <_sbrk_r>
 8004d20:	6038      	str	r0, [r7, #0]
 8004d22:	4629      	mov	r1, r5
 8004d24:	4630      	mov	r0, r6
 8004d26:	f000 f8c5 	bl	8004eb4 <_sbrk_r>
 8004d2a:	1c43      	adds	r3, r0, #1
 8004d2c:	d123      	bne.n	8004d76 <_malloc_r+0x92>
 8004d2e:	230c      	movs	r3, #12
 8004d30:	6033      	str	r3, [r6, #0]
 8004d32:	4630      	mov	r0, r6
 8004d34:	f000 fbb2 	bl	800549c <__malloc_unlock>
 8004d38:	e7e3      	b.n	8004d02 <_malloc_r+0x1e>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	1b5b      	subs	r3, r3, r5
 8004d3e:	d417      	bmi.n	8004d70 <_malloc_r+0x8c>
 8004d40:	2b0b      	cmp	r3, #11
 8004d42:	d903      	bls.n	8004d4c <_malloc_r+0x68>
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	441c      	add	r4, r3
 8004d48:	6025      	str	r5, [r4, #0]
 8004d4a:	e004      	b.n	8004d56 <_malloc_r+0x72>
 8004d4c:	6863      	ldr	r3, [r4, #4]
 8004d4e:	42a2      	cmp	r2, r4
 8004d50:	bf0c      	ite	eq
 8004d52:	600b      	streq	r3, [r1, #0]
 8004d54:	6053      	strne	r3, [r2, #4]
 8004d56:	4630      	mov	r0, r6
 8004d58:	f000 fba0 	bl	800549c <__malloc_unlock>
 8004d5c:	f104 000b 	add.w	r0, r4, #11
 8004d60:	1d23      	adds	r3, r4, #4
 8004d62:	f020 0007 	bic.w	r0, r0, #7
 8004d66:	1ac2      	subs	r2, r0, r3
 8004d68:	d0cc      	beq.n	8004d04 <_malloc_r+0x20>
 8004d6a:	1a1b      	subs	r3, r3, r0
 8004d6c:	50a3      	str	r3, [r4, r2]
 8004d6e:	e7c9      	b.n	8004d04 <_malloc_r+0x20>
 8004d70:	4622      	mov	r2, r4
 8004d72:	6864      	ldr	r4, [r4, #4]
 8004d74:	e7cc      	b.n	8004d10 <_malloc_r+0x2c>
 8004d76:	1cc4      	adds	r4, r0, #3
 8004d78:	f024 0403 	bic.w	r4, r4, #3
 8004d7c:	42a0      	cmp	r0, r4
 8004d7e:	d0e3      	beq.n	8004d48 <_malloc_r+0x64>
 8004d80:	1a21      	subs	r1, r4, r0
 8004d82:	4630      	mov	r0, r6
 8004d84:	f000 f896 	bl	8004eb4 <_sbrk_r>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d1dd      	bne.n	8004d48 <_malloc_r+0x64>
 8004d8c:	e7cf      	b.n	8004d2e <_malloc_r+0x4a>
 8004d8e:	bf00      	nop
 8004d90:	200000a0 	.word	0x200000a0
 8004d94:	200000a4 	.word	0x200000a4

08004d98 <iprintf>:
 8004d98:	b40f      	push	{r0, r1, r2, r3}
 8004d9a:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <iprintf+0x2c>)
 8004d9c:	b513      	push	{r0, r1, r4, lr}
 8004d9e:	681c      	ldr	r4, [r3, #0]
 8004da0:	b124      	cbz	r4, 8004dac <iprintf+0x14>
 8004da2:	69a3      	ldr	r3, [r4, #24]
 8004da4:	b913      	cbnz	r3, 8004dac <iprintf+0x14>
 8004da6:	4620      	mov	r0, r4
 8004da8:	f000 fa6e 	bl	8005288 <__sinit>
 8004dac:	ab05      	add	r3, sp, #20
 8004dae:	9a04      	ldr	r2, [sp, #16]
 8004db0:	68a1      	ldr	r1, [r4, #8]
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	4620      	mov	r0, r4
 8004db6:	f000 fba1 	bl	80054fc <_vfiprintf_r>
 8004dba:	b002      	add	sp, #8
 8004dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dc0:	b004      	add	sp, #16
 8004dc2:	4770      	bx	lr
 8004dc4:	20000018 	.word	0x20000018

08004dc8 <_puts_r>:
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	460e      	mov	r6, r1
 8004dcc:	4605      	mov	r5, r0
 8004dce:	b118      	cbz	r0, 8004dd8 <_puts_r+0x10>
 8004dd0:	6983      	ldr	r3, [r0, #24]
 8004dd2:	b90b      	cbnz	r3, 8004dd8 <_puts_r+0x10>
 8004dd4:	f000 fa58 	bl	8005288 <__sinit>
 8004dd8:	69ab      	ldr	r3, [r5, #24]
 8004dda:	68ac      	ldr	r4, [r5, #8]
 8004ddc:	b913      	cbnz	r3, 8004de4 <_puts_r+0x1c>
 8004dde:	4628      	mov	r0, r5
 8004de0:	f000 fa52 	bl	8005288 <__sinit>
 8004de4:	4b2c      	ldr	r3, [pc, #176]	; (8004e98 <_puts_r+0xd0>)
 8004de6:	429c      	cmp	r4, r3
 8004de8:	d120      	bne.n	8004e2c <_puts_r+0x64>
 8004dea:	686c      	ldr	r4, [r5, #4]
 8004dec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dee:	07db      	lsls	r3, r3, #31
 8004df0:	d405      	bmi.n	8004dfe <_puts_r+0x36>
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	0598      	lsls	r0, r3, #22
 8004df6:	d402      	bmi.n	8004dfe <_puts_r+0x36>
 8004df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dfa:	f000 fae3 	bl	80053c4 <__retarget_lock_acquire_recursive>
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	0719      	lsls	r1, r3, #28
 8004e02:	d51d      	bpl.n	8004e40 <_puts_r+0x78>
 8004e04:	6923      	ldr	r3, [r4, #16]
 8004e06:	b1db      	cbz	r3, 8004e40 <_puts_r+0x78>
 8004e08:	3e01      	subs	r6, #1
 8004e0a:	68a3      	ldr	r3, [r4, #8]
 8004e0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e10:	3b01      	subs	r3, #1
 8004e12:	60a3      	str	r3, [r4, #8]
 8004e14:	bb39      	cbnz	r1, 8004e66 <_puts_r+0x9e>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	da38      	bge.n	8004e8c <_puts_r+0xc4>
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	210a      	movs	r1, #10
 8004e1e:	4628      	mov	r0, r5
 8004e20:	f000 f858 	bl	8004ed4 <__swbuf_r>
 8004e24:	3001      	adds	r0, #1
 8004e26:	d011      	beq.n	8004e4c <_puts_r+0x84>
 8004e28:	250a      	movs	r5, #10
 8004e2a:	e011      	b.n	8004e50 <_puts_r+0x88>
 8004e2c:	4b1b      	ldr	r3, [pc, #108]	; (8004e9c <_puts_r+0xd4>)
 8004e2e:	429c      	cmp	r4, r3
 8004e30:	d101      	bne.n	8004e36 <_puts_r+0x6e>
 8004e32:	68ac      	ldr	r4, [r5, #8]
 8004e34:	e7da      	b.n	8004dec <_puts_r+0x24>
 8004e36:	4b1a      	ldr	r3, [pc, #104]	; (8004ea0 <_puts_r+0xd8>)
 8004e38:	429c      	cmp	r4, r3
 8004e3a:	bf08      	it	eq
 8004e3c:	68ec      	ldreq	r4, [r5, #12]
 8004e3e:	e7d5      	b.n	8004dec <_puts_r+0x24>
 8004e40:	4621      	mov	r1, r4
 8004e42:	4628      	mov	r0, r5
 8004e44:	f000 f898 	bl	8004f78 <__swsetup_r>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d0dd      	beq.n	8004e08 <_puts_r+0x40>
 8004e4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004e50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e52:	07da      	lsls	r2, r3, #31
 8004e54:	d405      	bmi.n	8004e62 <_puts_r+0x9a>
 8004e56:	89a3      	ldrh	r3, [r4, #12]
 8004e58:	059b      	lsls	r3, r3, #22
 8004e5a:	d402      	bmi.n	8004e62 <_puts_r+0x9a>
 8004e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e5e:	f000 fab2 	bl	80053c6 <__retarget_lock_release_recursive>
 8004e62:	4628      	mov	r0, r5
 8004e64:	bd70      	pop	{r4, r5, r6, pc}
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	da04      	bge.n	8004e74 <_puts_r+0xac>
 8004e6a:	69a2      	ldr	r2, [r4, #24]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	dc06      	bgt.n	8004e7e <_puts_r+0xb6>
 8004e70:	290a      	cmp	r1, #10
 8004e72:	d004      	beq.n	8004e7e <_puts_r+0xb6>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	6022      	str	r2, [r4, #0]
 8004e7a:	7019      	strb	r1, [r3, #0]
 8004e7c:	e7c5      	b.n	8004e0a <_puts_r+0x42>
 8004e7e:	4622      	mov	r2, r4
 8004e80:	4628      	mov	r0, r5
 8004e82:	f000 f827 	bl	8004ed4 <__swbuf_r>
 8004e86:	3001      	adds	r0, #1
 8004e88:	d1bf      	bne.n	8004e0a <_puts_r+0x42>
 8004e8a:	e7df      	b.n	8004e4c <_puts_r+0x84>
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	250a      	movs	r5, #10
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	6022      	str	r2, [r4, #0]
 8004e94:	701d      	strb	r5, [r3, #0]
 8004e96:	e7db      	b.n	8004e50 <_puts_r+0x88>
 8004e98:	08005cbc 	.word	0x08005cbc
 8004e9c:	08005cdc 	.word	0x08005cdc
 8004ea0:	08005c9c 	.word	0x08005c9c

08004ea4 <puts>:
 8004ea4:	4b02      	ldr	r3, [pc, #8]	; (8004eb0 <puts+0xc>)
 8004ea6:	4601      	mov	r1, r0
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	f7ff bf8d 	b.w	8004dc8 <_puts_r>
 8004eae:	bf00      	nop
 8004eb0:	20000018 	.word	0x20000018

08004eb4 <_sbrk_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4d06      	ldr	r5, [pc, #24]	; (8004ed0 <_sbrk_r+0x1c>)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	4604      	mov	r4, r0
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	602b      	str	r3, [r5, #0]
 8004ec0:	f7fb feec 	bl	8000c9c <_sbrk>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d102      	bne.n	8004ece <_sbrk_r+0x1a>
 8004ec8:	682b      	ldr	r3, [r5, #0]
 8004eca:	b103      	cbz	r3, 8004ece <_sbrk_r+0x1a>
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	200002cc 	.word	0x200002cc

08004ed4 <__swbuf_r>:
 8004ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed6:	460e      	mov	r6, r1
 8004ed8:	4614      	mov	r4, r2
 8004eda:	4605      	mov	r5, r0
 8004edc:	b118      	cbz	r0, 8004ee6 <__swbuf_r+0x12>
 8004ede:	6983      	ldr	r3, [r0, #24]
 8004ee0:	b90b      	cbnz	r3, 8004ee6 <__swbuf_r+0x12>
 8004ee2:	f000 f9d1 	bl	8005288 <__sinit>
 8004ee6:	4b21      	ldr	r3, [pc, #132]	; (8004f6c <__swbuf_r+0x98>)
 8004ee8:	429c      	cmp	r4, r3
 8004eea:	d12b      	bne.n	8004f44 <__swbuf_r+0x70>
 8004eec:	686c      	ldr	r4, [r5, #4]
 8004eee:	69a3      	ldr	r3, [r4, #24]
 8004ef0:	60a3      	str	r3, [r4, #8]
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	071a      	lsls	r2, r3, #28
 8004ef6:	d52f      	bpl.n	8004f58 <__swbuf_r+0x84>
 8004ef8:	6923      	ldr	r3, [r4, #16]
 8004efa:	b36b      	cbz	r3, 8004f58 <__swbuf_r+0x84>
 8004efc:	6923      	ldr	r3, [r4, #16]
 8004efe:	6820      	ldr	r0, [r4, #0]
 8004f00:	1ac0      	subs	r0, r0, r3
 8004f02:	6963      	ldr	r3, [r4, #20]
 8004f04:	b2f6      	uxtb	r6, r6
 8004f06:	4283      	cmp	r3, r0
 8004f08:	4637      	mov	r7, r6
 8004f0a:	dc04      	bgt.n	8004f16 <__swbuf_r+0x42>
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	4628      	mov	r0, r5
 8004f10:	f000 f926 	bl	8005160 <_fflush_r>
 8004f14:	bb30      	cbnz	r0, 8004f64 <__swbuf_r+0x90>
 8004f16:	68a3      	ldr	r3, [r4, #8]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	60a3      	str	r3, [r4, #8]
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	6022      	str	r2, [r4, #0]
 8004f22:	701e      	strb	r6, [r3, #0]
 8004f24:	6963      	ldr	r3, [r4, #20]
 8004f26:	3001      	adds	r0, #1
 8004f28:	4283      	cmp	r3, r0
 8004f2a:	d004      	beq.n	8004f36 <__swbuf_r+0x62>
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	07db      	lsls	r3, r3, #31
 8004f30:	d506      	bpl.n	8004f40 <__swbuf_r+0x6c>
 8004f32:	2e0a      	cmp	r6, #10
 8004f34:	d104      	bne.n	8004f40 <__swbuf_r+0x6c>
 8004f36:	4621      	mov	r1, r4
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f000 f911 	bl	8005160 <_fflush_r>
 8004f3e:	b988      	cbnz	r0, 8004f64 <__swbuf_r+0x90>
 8004f40:	4638      	mov	r0, r7
 8004f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f44:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <__swbuf_r+0x9c>)
 8004f46:	429c      	cmp	r4, r3
 8004f48:	d101      	bne.n	8004f4e <__swbuf_r+0x7a>
 8004f4a:	68ac      	ldr	r4, [r5, #8]
 8004f4c:	e7cf      	b.n	8004eee <__swbuf_r+0x1a>
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <__swbuf_r+0xa0>)
 8004f50:	429c      	cmp	r4, r3
 8004f52:	bf08      	it	eq
 8004f54:	68ec      	ldreq	r4, [r5, #12]
 8004f56:	e7ca      	b.n	8004eee <__swbuf_r+0x1a>
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f000 f80c 	bl	8004f78 <__swsetup_r>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d0cb      	beq.n	8004efc <__swbuf_r+0x28>
 8004f64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004f68:	e7ea      	b.n	8004f40 <__swbuf_r+0x6c>
 8004f6a:	bf00      	nop
 8004f6c:	08005cbc 	.word	0x08005cbc
 8004f70:	08005cdc 	.word	0x08005cdc
 8004f74:	08005c9c 	.word	0x08005c9c

08004f78 <__swsetup_r>:
 8004f78:	4b32      	ldr	r3, [pc, #200]	; (8005044 <__swsetup_r+0xcc>)
 8004f7a:	b570      	push	{r4, r5, r6, lr}
 8004f7c:	681d      	ldr	r5, [r3, #0]
 8004f7e:	4606      	mov	r6, r0
 8004f80:	460c      	mov	r4, r1
 8004f82:	b125      	cbz	r5, 8004f8e <__swsetup_r+0x16>
 8004f84:	69ab      	ldr	r3, [r5, #24]
 8004f86:	b913      	cbnz	r3, 8004f8e <__swsetup_r+0x16>
 8004f88:	4628      	mov	r0, r5
 8004f8a:	f000 f97d 	bl	8005288 <__sinit>
 8004f8e:	4b2e      	ldr	r3, [pc, #184]	; (8005048 <__swsetup_r+0xd0>)
 8004f90:	429c      	cmp	r4, r3
 8004f92:	d10f      	bne.n	8004fb4 <__swsetup_r+0x3c>
 8004f94:	686c      	ldr	r4, [r5, #4]
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f9c:	0719      	lsls	r1, r3, #28
 8004f9e:	d42c      	bmi.n	8004ffa <__swsetup_r+0x82>
 8004fa0:	06dd      	lsls	r5, r3, #27
 8004fa2:	d411      	bmi.n	8004fc8 <__swsetup_r+0x50>
 8004fa4:	2309      	movs	r3, #9
 8004fa6:	6033      	str	r3, [r6, #0]
 8004fa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004fac:	81a3      	strh	r3, [r4, #12]
 8004fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fb2:	e03e      	b.n	8005032 <__swsetup_r+0xba>
 8004fb4:	4b25      	ldr	r3, [pc, #148]	; (800504c <__swsetup_r+0xd4>)
 8004fb6:	429c      	cmp	r4, r3
 8004fb8:	d101      	bne.n	8004fbe <__swsetup_r+0x46>
 8004fba:	68ac      	ldr	r4, [r5, #8]
 8004fbc:	e7eb      	b.n	8004f96 <__swsetup_r+0x1e>
 8004fbe:	4b24      	ldr	r3, [pc, #144]	; (8005050 <__swsetup_r+0xd8>)
 8004fc0:	429c      	cmp	r4, r3
 8004fc2:	bf08      	it	eq
 8004fc4:	68ec      	ldreq	r4, [r5, #12]
 8004fc6:	e7e6      	b.n	8004f96 <__swsetup_r+0x1e>
 8004fc8:	0758      	lsls	r0, r3, #29
 8004fca:	d512      	bpl.n	8004ff2 <__swsetup_r+0x7a>
 8004fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fce:	b141      	cbz	r1, 8004fe2 <__swsetup_r+0x6a>
 8004fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fd4:	4299      	cmp	r1, r3
 8004fd6:	d002      	beq.n	8004fde <__swsetup_r+0x66>
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f7ff fe33 	bl	8004c44 <_free_r>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8004fe2:	89a3      	ldrh	r3, [r4, #12]
 8004fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fe8:	81a3      	strh	r3, [r4, #12]
 8004fea:	2300      	movs	r3, #0
 8004fec:	6063      	str	r3, [r4, #4]
 8004fee:	6923      	ldr	r3, [r4, #16]
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	f043 0308 	orr.w	r3, r3, #8
 8004ff8:	81a3      	strh	r3, [r4, #12]
 8004ffa:	6923      	ldr	r3, [r4, #16]
 8004ffc:	b94b      	cbnz	r3, 8005012 <__swsetup_r+0x9a>
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005008:	d003      	beq.n	8005012 <__swsetup_r+0x9a>
 800500a:	4621      	mov	r1, r4
 800500c:	4630      	mov	r0, r6
 800500e:	f000 f9ff 	bl	8005410 <__smakebuf_r>
 8005012:	89a0      	ldrh	r0, [r4, #12]
 8005014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005018:	f010 0301 	ands.w	r3, r0, #1
 800501c:	d00a      	beq.n	8005034 <__swsetup_r+0xbc>
 800501e:	2300      	movs	r3, #0
 8005020:	60a3      	str	r3, [r4, #8]
 8005022:	6963      	ldr	r3, [r4, #20]
 8005024:	425b      	negs	r3, r3
 8005026:	61a3      	str	r3, [r4, #24]
 8005028:	6923      	ldr	r3, [r4, #16]
 800502a:	b943      	cbnz	r3, 800503e <__swsetup_r+0xc6>
 800502c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005030:	d1ba      	bne.n	8004fa8 <__swsetup_r+0x30>
 8005032:	bd70      	pop	{r4, r5, r6, pc}
 8005034:	0781      	lsls	r1, r0, #30
 8005036:	bf58      	it	pl
 8005038:	6963      	ldrpl	r3, [r4, #20]
 800503a:	60a3      	str	r3, [r4, #8]
 800503c:	e7f4      	b.n	8005028 <__swsetup_r+0xb0>
 800503e:	2000      	movs	r0, #0
 8005040:	e7f7      	b.n	8005032 <__swsetup_r+0xba>
 8005042:	bf00      	nop
 8005044:	20000018 	.word	0x20000018
 8005048:	08005cbc 	.word	0x08005cbc
 800504c:	08005cdc 	.word	0x08005cdc
 8005050:	08005c9c 	.word	0x08005c9c

08005054 <__sflush_r>:
 8005054:	898a      	ldrh	r2, [r1, #12]
 8005056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800505a:	4605      	mov	r5, r0
 800505c:	0710      	lsls	r0, r2, #28
 800505e:	460c      	mov	r4, r1
 8005060:	d458      	bmi.n	8005114 <__sflush_r+0xc0>
 8005062:	684b      	ldr	r3, [r1, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	dc05      	bgt.n	8005074 <__sflush_r+0x20>
 8005068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	dc02      	bgt.n	8005074 <__sflush_r+0x20>
 800506e:	2000      	movs	r0, #0
 8005070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005076:	2e00      	cmp	r6, #0
 8005078:	d0f9      	beq.n	800506e <__sflush_r+0x1a>
 800507a:	2300      	movs	r3, #0
 800507c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005080:	682f      	ldr	r7, [r5, #0]
 8005082:	602b      	str	r3, [r5, #0]
 8005084:	d032      	beq.n	80050ec <__sflush_r+0x98>
 8005086:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	075a      	lsls	r2, r3, #29
 800508c:	d505      	bpl.n	800509a <__sflush_r+0x46>
 800508e:	6863      	ldr	r3, [r4, #4]
 8005090:	1ac0      	subs	r0, r0, r3
 8005092:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005094:	b10b      	cbz	r3, 800509a <__sflush_r+0x46>
 8005096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005098:	1ac0      	subs	r0, r0, r3
 800509a:	2300      	movs	r3, #0
 800509c:	4602      	mov	r2, r0
 800509e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050a0:	6a21      	ldr	r1, [r4, #32]
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b0      	blx	r6
 80050a6:	1c43      	adds	r3, r0, #1
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	d106      	bne.n	80050ba <__sflush_r+0x66>
 80050ac:	6829      	ldr	r1, [r5, #0]
 80050ae:	291d      	cmp	r1, #29
 80050b0:	d82c      	bhi.n	800510c <__sflush_r+0xb8>
 80050b2:	4a2a      	ldr	r2, [pc, #168]	; (800515c <__sflush_r+0x108>)
 80050b4:	40ca      	lsrs	r2, r1
 80050b6:	07d6      	lsls	r6, r2, #31
 80050b8:	d528      	bpl.n	800510c <__sflush_r+0xb8>
 80050ba:	2200      	movs	r2, #0
 80050bc:	6062      	str	r2, [r4, #4]
 80050be:	04d9      	lsls	r1, r3, #19
 80050c0:	6922      	ldr	r2, [r4, #16]
 80050c2:	6022      	str	r2, [r4, #0]
 80050c4:	d504      	bpl.n	80050d0 <__sflush_r+0x7c>
 80050c6:	1c42      	adds	r2, r0, #1
 80050c8:	d101      	bne.n	80050ce <__sflush_r+0x7a>
 80050ca:	682b      	ldr	r3, [r5, #0]
 80050cc:	b903      	cbnz	r3, 80050d0 <__sflush_r+0x7c>
 80050ce:	6560      	str	r0, [r4, #84]	; 0x54
 80050d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050d2:	602f      	str	r7, [r5, #0]
 80050d4:	2900      	cmp	r1, #0
 80050d6:	d0ca      	beq.n	800506e <__sflush_r+0x1a>
 80050d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050dc:	4299      	cmp	r1, r3
 80050de:	d002      	beq.n	80050e6 <__sflush_r+0x92>
 80050e0:	4628      	mov	r0, r5
 80050e2:	f7ff fdaf 	bl	8004c44 <_free_r>
 80050e6:	2000      	movs	r0, #0
 80050e8:	6360      	str	r0, [r4, #52]	; 0x34
 80050ea:	e7c1      	b.n	8005070 <__sflush_r+0x1c>
 80050ec:	6a21      	ldr	r1, [r4, #32]
 80050ee:	2301      	movs	r3, #1
 80050f0:	4628      	mov	r0, r5
 80050f2:	47b0      	blx	r6
 80050f4:	1c41      	adds	r1, r0, #1
 80050f6:	d1c7      	bne.n	8005088 <__sflush_r+0x34>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0c4      	beq.n	8005088 <__sflush_r+0x34>
 80050fe:	2b1d      	cmp	r3, #29
 8005100:	d001      	beq.n	8005106 <__sflush_r+0xb2>
 8005102:	2b16      	cmp	r3, #22
 8005104:	d101      	bne.n	800510a <__sflush_r+0xb6>
 8005106:	602f      	str	r7, [r5, #0]
 8005108:	e7b1      	b.n	800506e <__sflush_r+0x1a>
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005110:	81a3      	strh	r3, [r4, #12]
 8005112:	e7ad      	b.n	8005070 <__sflush_r+0x1c>
 8005114:	690f      	ldr	r7, [r1, #16]
 8005116:	2f00      	cmp	r7, #0
 8005118:	d0a9      	beq.n	800506e <__sflush_r+0x1a>
 800511a:	0793      	lsls	r3, r2, #30
 800511c:	680e      	ldr	r6, [r1, #0]
 800511e:	bf08      	it	eq
 8005120:	694b      	ldreq	r3, [r1, #20]
 8005122:	600f      	str	r7, [r1, #0]
 8005124:	bf18      	it	ne
 8005126:	2300      	movne	r3, #0
 8005128:	eba6 0807 	sub.w	r8, r6, r7
 800512c:	608b      	str	r3, [r1, #8]
 800512e:	f1b8 0f00 	cmp.w	r8, #0
 8005132:	dd9c      	ble.n	800506e <__sflush_r+0x1a>
 8005134:	6a21      	ldr	r1, [r4, #32]
 8005136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005138:	4643      	mov	r3, r8
 800513a:	463a      	mov	r2, r7
 800513c:	4628      	mov	r0, r5
 800513e:	47b0      	blx	r6
 8005140:	2800      	cmp	r0, #0
 8005142:	dc06      	bgt.n	8005152 <__sflush_r+0xfe>
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005150:	e78e      	b.n	8005070 <__sflush_r+0x1c>
 8005152:	4407      	add	r7, r0
 8005154:	eba8 0800 	sub.w	r8, r8, r0
 8005158:	e7e9      	b.n	800512e <__sflush_r+0xda>
 800515a:	bf00      	nop
 800515c:	20400001 	.word	0x20400001

08005160 <_fflush_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	690b      	ldr	r3, [r1, #16]
 8005164:	4605      	mov	r5, r0
 8005166:	460c      	mov	r4, r1
 8005168:	b913      	cbnz	r3, 8005170 <_fflush_r+0x10>
 800516a:	2500      	movs	r5, #0
 800516c:	4628      	mov	r0, r5
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	b118      	cbz	r0, 800517a <_fflush_r+0x1a>
 8005172:	6983      	ldr	r3, [r0, #24]
 8005174:	b90b      	cbnz	r3, 800517a <_fflush_r+0x1a>
 8005176:	f000 f887 	bl	8005288 <__sinit>
 800517a:	4b14      	ldr	r3, [pc, #80]	; (80051cc <_fflush_r+0x6c>)
 800517c:	429c      	cmp	r4, r3
 800517e:	d11b      	bne.n	80051b8 <_fflush_r+0x58>
 8005180:	686c      	ldr	r4, [r5, #4]
 8005182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0ef      	beq.n	800516a <_fflush_r+0xa>
 800518a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800518c:	07d0      	lsls	r0, r2, #31
 800518e:	d404      	bmi.n	800519a <_fflush_r+0x3a>
 8005190:	0599      	lsls	r1, r3, #22
 8005192:	d402      	bmi.n	800519a <_fflush_r+0x3a>
 8005194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005196:	f000 f915 	bl	80053c4 <__retarget_lock_acquire_recursive>
 800519a:	4628      	mov	r0, r5
 800519c:	4621      	mov	r1, r4
 800519e:	f7ff ff59 	bl	8005054 <__sflush_r>
 80051a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051a4:	07da      	lsls	r2, r3, #31
 80051a6:	4605      	mov	r5, r0
 80051a8:	d4e0      	bmi.n	800516c <_fflush_r+0xc>
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	059b      	lsls	r3, r3, #22
 80051ae:	d4dd      	bmi.n	800516c <_fflush_r+0xc>
 80051b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051b2:	f000 f908 	bl	80053c6 <__retarget_lock_release_recursive>
 80051b6:	e7d9      	b.n	800516c <_fflush_r+0xc>
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <_fflush_r+0x70>)
 80051ba:	429c      	cmp	r4, r3
 80051bc:	d101      	bne.n	80051c2 <_fflush_r+0x62>
 80051be:	68ac      	ldr	r4, [r5, #8]
 80051c0:	e7df      	b.n	8005182 <_fflush_r+0x22>
 80051c2:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <_fflush_r+0x74>)
 80051c4:	429c      	cmp	r4, r3
 80051c6:	bf08      	it	eq
 80051c8:	68ec      	ldreq	r4, [r5, #12]
 80051ca:	e7da      	b.n	8005182 <_fflush_r+0x22>
 80051cc:	08005cbc 	.word	0x08005cbc
 80051d0:	08005cdc 	.word	0x08005cdc
 80051d4:	08005c9c 	.word	0x08005c9c

080051d8 <std>:
 80051d8:	2300      	movs	r3, #0
 80051da:	b510      	push	{r4, lr}
 80051dc:	4604      	mov	r4, r0
 80051de:	e9c0 3300 	strd	r3, r3, [r0]
 80051e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051e6:	6083      	str	r3, [r0, #8]
 80051e8:	8181      	strh	r1, [r0, #12]
 80051ea:	6643      	str	r3, [r0, #100]	; 0x64
 80051ec:	81c2      	strh	r2, [r0, #14]
 80051ee:	6183      	str	r3, [r0, #24]
 80051f0:	4619      	mov	r1, r3
 80051f2:	2208      	movs	r2, #8
 80051f4:	305c      	adds	r0, #92	; 0x5c
 80051f6:	f7ff fd1d 	bl	8004c34 <memset>
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <std+0x38>)
 80051fc:	6263      	str	r3, [r4, #36]	; 0x24
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <std+0x3c>)
 8005200:	62a3      	str	r3, [r4, #40]	; 0x28
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <std+0x40>)
 8005204:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005206:	4b05      	ldr	r3, [pc, #20]	; (800521c <std+0x44>)
 8005208:	6224      	str	r4, [r4, #32]
 800520a:	6323      	str	r3, [r4, #48]	; 0x30
 800520c:	bd10      	pop	{r4, pc}
 800520e:	bf00      	nop
 8005210:	08005a85 	.word	0x08005a85
 8005214:	08005aa7 	.word	0x08005aa7
 8005218:	08005adf 	.word	0x08005adf
 800521c:	08005b03 	.word	0x08005b03

08005220 <_cleanup_r>:
 8005220:	4901      	ldr	r1, [pc, #4]	; (8005228 <_cleanup_r+0x8>)
 8005222:	f000 b8af 	b.w	8005384 <_fwalk_reent>
 8005226:	bf00      	nop
 8005228:	08005161 	.word	0x08005161

0800522c <__sfmoreglue>:
 800522c:	b570      	push	{r4, r5, r6, lr}
 800522e:	1e4a      	subs	r2, r1, #1
 8005230:	2568      	movs	r5, #104	; 0x68
 8005232:	4355      	muls	r5, r2
 8005234:	460e      	mov	r6, r1
 8005236:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800523a:	f7ff fd53 	bl	8004ce4 <_malloc_r>
 800523e:	4604      	mov	r4, r0
 8005240:	b140      	cbz	r0, 8005254 <__sfmoreglue+0x28>
 8005242:	2100      	movs	r1, #0
 8005244:	e9c0 1600 	strd	r1, r6, [r0]
 8005248:	300c      	adds	r0, #12
 800524a:	60a0      	str	r0, [r4, #8]
 800524c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005250:	f7ff fcf0 	bl	8004c34 <memset>
 8005254:	4620      	mov	r0, r4
 8005256:	bd70      	pop	{r4, r5, r6, pc}

08005258 <__sfp_lock_acquire>:
 8005258:	4801      	ldr	r0, [pc, #4]	; (8005260 <__sfp_lock_acquire+0x8>)
 800525a:	f000 b8b3 	b.w	80053c4 <__retarget_lock_acquire_recursive>
 800525e:	bf00      	nop
 8005260:	200002c8 	.word	0x200002c8

08005264 <__sfp_lock_release>:
 8005264:	4801      	ldr	r0, [pc, #4]	; (800526c <__sfp_lock_release+0x8>)
 8005266:	f000 b8ae 	b.w	80053c6 <__retarget_lock_release_recursive>
 800526a:	bf00      	nop
 800526c:	200002c8 	.word	0x200002c8

08005270 <__sinit_lock_acquire>:
 8005270:	4801      	ldr	r0, [pc, #4]	; (8005278 <__sinit_lock_acquire+0x8>)
 8005272:	f000 b8a7 	b.w	80053c4 <__retarget_lock_acquire_recursive>
 8005276:	bf00      	nop
 8005278:	200002c3 	.word	0x200002c3

0800527c <__sinit_lock_release>:
 800527c:	4801      	ldr	r0, [pc, #4]	; (8005284 <__sinit_lock_release+0x8>)
 800527e:	f000 b8a2 	b.w	80053c6 <__retarget_lock_release_recursive>
 8005282:	bf00      	nop
 8005284:	200002c3 	.word	0x200002c3

08005288 <__sinit>:
 8005288:	b510      	push	{r4, lr}
 800528a:	4604      	mov	r4, r0
 800528c:	f7ff fff0 	bl	8005270 <__sinit_lock_acquire>
 8005290:	69a3      	ldr	r3, [r4, #24]
 8005292:	b11b      	cbz	r3, 800529c <__sinit+0x14>
 8005294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005298:	f7ff bff0 	b.w	800527c <__sinit_lock_release>
 800529c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80052a0:	6523      	str	r3, [r4, #80]	; 0x50
 80052a2:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <__sinit+0x68>)
 80052a4:	4a13      	ldr	r2, [pc, #76]	; (80052f4 <__sinit+0x6c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80052aa:	42a3      	cmp	r3, r4
 80052ac:	bf04      	itt	eq
 80052ae:	2301      	moveq	r3, #1
 80052b0:	61a3      	streq	r3, [r4, #24]
 80052b2:	4620      	mov	r0, r4
 80052b4:	f000 f820 	bl	80052f8 <__sfp>
 80052b8:	6060      	str	r0, [r4, #4]
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 f81c 	bl	80052f8 <__sfp>
 80052c0:	60a0      	str	r0, [r4, #8]
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 f818 	bl	80052f8 <__sfp>
 80052c8:	2200      	movs	r2, #0
 80052ca:	60e0      	str	r0, [r4, #12]
 80052cc:	2104      	movs	r1, #4
 80052ce:	6860      	ldr	r0, [r4, #4]
 80052d0:	f7ff ff82 	bl	80051d8 <std>
 80052d4:	68a0      	ldr	r0, [r4, #8]
 80052d6:	2201      	movs	r2, #1
 80052d8:	2109      	movs	r1, #9
 80052da:	f7ff ff7d 	bl	80051d8 <std>
 80052de:	68e0      	ldr	r0, [r4, #12]
 80052e0:	2202      	movs	r2, #2
 80052e2:	2112      	movs	r1, #18
 80052e4:	f7ff ff78 	bl	80051d8 <std>
 80052e8:	2301      	movs	r3, #1
 80052ea:	61a3      	str	r3, [r4, #24]
 80052ec:	e7d2      	b.n	8005294 <__sinit+0xc>
 80052ee:	bf00      	nop
 80052f0:	08005c98 	.word	0x08005c98
 80052f4:	08005221 	.word	0x08005221

080052f8 <__sfp>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	4607      	mov	r7, r0
 80052fc:	f7ff ffac 	bl	8005258 <__sfp_lock_acquire>
 8005300:	4b1e      	ldr	r3, [pc, #120]	; (800537c <__sfp+0x84>)
 8005302:	681e      	ldr	r6, [r3, #0]
 8005304:	69b3      	ldr	r3, [r6, #24]
 8005306:	b913      	cbnz	r3, 800530e <__sfp+0x16>
 8005308:	4630      	mov	r0, r6
 800530a:	f7ff ffbd 	bl	8005288 <__sinit>
 800530e:	3648      	adds	r6, #72	; 0x48
 8005310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005314:	3b01      	subs	r3, #1
 8005316:	d503      	bpl.n	8005320 <__sfp+0x28>
 8005318:	6833      	ldr	r3, [r6, #0]
 800531a:	b30b      	cbz	r3, 8005360 <__sfp+0x68>
 800531c:	6836      	ldr	r6, [r6, #0]
 800531e:	e7f7      	b.n	8005310 <__sfp+0x18>
 8005320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005324:	b9d5      	cbnz	r5, 800535c <__sfp+0x64>
 8005326:	4b16      	ldr	r3, [pc, #88]	; (8005380 <__sfp+0x88>)
 8005328:	60e3      	str	r3, [r4, #12]
 800532a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800532e:	6665      	str	r5, [r4, #100]	; 0x64
 8005330:	f000 f847 	bl	80053c2 <__retarget_lock_init_recursive>
 8005334:	f7ff ff96 	bl	8005264 <__sfp_lock_release>
 8005338:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800533c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005340:	6025      	str	r5, [r4, #0]
 8005342:	61a5      	str	r5, [r4, #24]
 8005344:	2208      	movs	r2, #8
 8005346:	4629      	mov	r1, r5
 8005348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800534c:	f7ff fc72 	bl	8004c34 <memset>
 8005350:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005354:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005358:	4620      	mov	r0, r4
 800535a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800535c:	3468      	adds	r4, #104	; 0x68
 800535e:	e7d9      	b.n	8005314 <__sfp+0x1c>
 8005360:	2104      	movs	r1, #4
 8005362:	4638      	mov	r0, r7
 8005364:	f7ff ff62 	bl	800522c <__sfmoreglue>
 8005368:	4604      	mov	r4, r0
 800536a:	6030      	str	r0, [r6, #0]
 800536c:	2800      	cmp	r0, #0
 800536e:	d1d5      	bne.n	800531c <__sfp+0x24>
 8005370:	f7ff ff78 	bl	8005264 <__sfp_lock_release>
 8005374:	230c      	movs	r3, #12
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	e7ee      	b.n	8005358 <__sfp+0x60>
 800537a:	bf00      	nop
 800537c:	08005c98 	.word	0x08005c98
 8005380:	ffff0001 	.word	0xffff0001

08005384 <_fwalk_reent>:
 8005384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005388:	4606      	mov	r6, r0
 800538a:	4688      	mov	r8, r1
 800538c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005390:	2700      	movs	r7, #0
 8005392:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005396:	f1b9 0901 	subs.w	r9, r9, #1
 800539a:	d505      	bpl.n	80053a8 <_fwalk_reent+0x24>
 800539c:	6824      	ldr	r4, [r4, #0]
 800539e:	2c00      	cmp	r4, #0
 80053a0:	d1f7      	bne.n	8005392 <_fwalk_reent+0xe>
 80053a2:	4638      	mov	r0, r7
 80053a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a8:	89ab      	ldrh	r3, [r5, #12]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d907      	bls.n	80053be <_fwalk_reent+0x3a>
 80053ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053b2:	3301      	adds	r3, #1
 80053b4:	d003      	beq.n	80053be <_fwalk_reent+0x3a>
 80053b6:	4629      	mov	r1, r5
 80053b8:	4630      	mov	r0, r6
 80053ba:	47c0      	blx	r8
 80053bc:	4307      	orrs	r7, r0
 80053be:	3568      	adds	r5, #104	; 0x68
 80053c0:	e7e9      	b.n	8005396 <_fwalk_reent+0x12>

080053c2 <__retarget_lock_init_recursive>:
 80053c2:	4770      	bx	lr

080053c4 <__retarget_lock_acquire_recursive>:
 80053c4:	4770      	bx	lr

080053c6 <__retarget_lock_release_recursive>:
 80053c6:	4770      	bx	lr

080053c8 <__swhatbuf_r>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	460e      	mov	r6, r1
 80053cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d0:	2900      	cmp	r1, #0
 80053d2:	b096      	sub	sp, #88	; 0x58
 80053d4:	4614      	mov	r4, r2
 80053d6:	461d      	mov	r5, r3
 80053d8:	da07      	bge.n	80053ea <__swhatbuf_r+0x22>
 80053da:	2300      	movs	r3, #0
 80053dc:	602b      	str	r3, [r5, #0]
 80053de:	89b3      	ldrh	r3, [r6, #12]
 80053e0:	061a      	lsls	r2, r3, #24
 80053e2:	d410      	bmi.n	8005406 <__swhatbuf_r+0x3e>
 80053e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053e8:	e00e      	b.n	8005408 <__swhatbuf_r+0x40>
 80053ea:	466a      	mov	r2, sp
 80053ec:	f000 fbb0 	bl	8005b50 <_fstat_r>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	dbf2      	blt.n	80053da <__swhatbuf_r+0x12>
 80053f4:	9a01      	ldr	r2, [sp, #4]
 80053f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80053fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053fe:	425a      	negs	r2, r3
 8005400:	415a      	adcs	r2, r3
 8005402:	602a      	str	r2, [r5, #0]
 8005404:	e7ee      	b.n	80053e4 <__swhatbuf_r+0x1c>
 8005406:	2340      	movs	r3, #64	; 0x40
 8005408:	2000      	movs	r0, #0
 800540a:	6023      	str	r3, [r4, #0]
 800540c:	b016      	add	sp, #88	; 0x58
 800540e:	bd70      	pop	{r4, r5, r6, pc}

08005410 <__smakebuf_r>:
 8005410:	898b      	ldrh	r3, [r1, #12]
 8005412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005414:	079d      	lsls	r5, r3, #30
 8005416:	4606      	mov	r6, r0
 8005418:	460c      	mov	r4, r1
 800541a:	d507      	bpl.n	800542c <__smakebuf_r+0x1c>
 800541c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	6123      	str	r3, [r4, #16]
 8005424:	2301      	movs	r3, #1
 8005426:	6163      	str	r3, [r4, #20]
 8005428:	b002      	add	sp, #8
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	ab01      	add	r3, sp, #4
 800542e:	466a      	mov	r2, sp
 8005430:	f7ff ffca 	bl	80053c8 <__swhatbuf_r>
 8005434:	9900      	ldr	r1, [sp, #0]
 8005436:	4605      	mov	r5, r0
 8005438:	4630      	mov	r0, r6
 800543a:	f7ff fc53 	bl	8004ce4 <_malloc_r>
 800543e:	b948      	cbnz	r0, 8005454 <__smakebuf_r+0x44>
 8005440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005444:	059a      	lsls	r2, r3, #22
 8005446:	d4ef      	bmi.n	8005428 <__smakebuf_r+0x18>
 8005448:	f023 0303 	bic.w	r3, r3, #3
 800544c:	f043 0302 	orr.w	r3, r3, #2
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	e7e3      	b.n	800541c <__smakebuf_r+0xc>
 8005454:	4b0d      	ldr	r3, [pc, #52]	; (800548c <__smakebuf_r+0x7c>)
 8005456:	62b3      	str	r3, [r6, #40]	; 0x28
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	6020      	str	r0, [r4, #0]
 800545c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005460:	81a3      	strh	r3, [r4, #12]
 8005462:	9b00      	ldr	r3, [sp, #0]
 8005464:	6163      	str	r3, [r4, #20]
 8005466:	9b01      	ldr	r3, [sp, #4]
 8005468:	6120      	str	r0, [r4, #16]
 800546a:	b15b      	cbz	r3, 8005484 <__smakebuf_r+0x74>
 800546c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005470:	4630      	mov	r0, r6
 8005472:	f000 fb7f 	bl	8005b74 <_isatty_r>
 8005476:	b128      	cbz	r0, 8005484 <__smakebuf_r+0x74>
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	89a0      	ldrh	r0, [r4, #12]
 8005486:	4305      	orrs	r5, r0
 8005488:	81a5      	strh	r5, [r4, #12]
 800548a:	e7cd      	b.n	8005428 <__smakebuf_r+0x18>
 800548c:	08005221 	.word	0x08005221

08005490 <__malloc_lock>:
 8005490:	4801      	ldr	r0, [pc, #4]	; (8005498 <__malloc_lock+0x8>)
 8005492:	f7ff bf97 	b.w	80053c4 <__retarget_lock_acquire_recursive>
 8005496:	bf00      	nop
 8005498:	200002c4 	.word	0x200002c4

0800549c <__malloc_unlock>:
 800549c:	4801      	ldr	r0, [pc, #4]	; (80054a4 <__malloc_unlock+0x8>)
 800549e:	f7ff bf92 	b.w	80053c6 <__retarget_lock_release_recursive>
 80054a2:	bf00      	nop
 80054a4:	200002c4 	.word	0x200002c4

080054a8 <__sfputc_r>:
 80054a8:	6893      	ldr	r3, [r2, #8]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	b410      	push	{r4}
 80054b0:	6093      	str	r3, [r2, #8]
 80054b2:	da08      	bge.n	80054c6 <__sfputc_r+0x1e>
 80054b4:	6994      	ldr	r4, [r2, #24]
 80054b6:	42a3      	cmp	r3, r4
 80054b8:	db01      	blt.n	80054be <__sfputc_r+0x16>
 80054ba:	290a      	cmp	r1, #10
 80054bc:	d103      	bne.n	80054c6 <__sfputc_r+0x1e>
 80054be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054c2:	f7ff bd07 	b.w	8004ed4 <__swbuf_r>
 80054c6:	6813      	ldr	r3, [r2, #0]
 80054c8:	1c58      	adds	r0, r3, #1
 80054ca:	6010      	str	r0, [r2, #0]
 80054cc:	7019      	strb	r1, [r3, #0]
 80054ce:	4608      	mov	r0, r1
 80054d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <__sfputs_r>:
 80054d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d8:	4606      	mov	r6, r0
 80054da:	460f      	mov	r7, r1
 80054dc:	4614      	mov	r4, r2
 80054de:	18d5      	adds	r5, r2, r3
 80054e0:	42ac      	cmp	r4, r5
 80054e2:	d101      	bne.n	80054e8 <__sfputs_r+0x12>
 80054e4:	2000      	movs	r0, #0
 80054e6:	e007      	b.n	80054f8 <__sfputs_r+0x22>
 80054e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054ec:	463a      	mov	r2, r7
 80054ee:	4630      	mov	r0, r6
 80054f0:	f7ff ffda 	bl	80054a8 <__sfputc_r>
 80054f4:	1c43      	adds	r3, r0, #1
 80054f6:	d1f3      	bne.n	80054e0 <__sfputs_r+0xa>
 80054f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054fc <_vfiprintf_r>:
 80054fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005500:	460d      	mov	r5, r1
 8005502:	b09d      	sub	sp, #116	; 0x74
 8005504:	4614      	mov	r4, r2
 8005506:	4698      	mov	r8, r3
 8005508:	4606      	mov	r6, r0
 800550a:	b118      	cbz	r0, 8005514 <_vfiprintf_r+0x18>
 800550c:	6983      	ldr	r3, [r0, #24]
 800550e:	b90b      	cbnz	r3, 8005514 <_vfiprintf_r+0x18>
 8005510:	f7ff feba 	bl	8005288 <__sinit>
 8005514:	4b89      	ldr	r3, [pc, #548]	; (800573c <_vfiprintf_r+0x240>)
 8005516:	429d      	cmp	r5, r3
 8005518:	d11b      	bne.n	8005552 <_vfiprintf_r+0x56>
 800551a:	6875      	ldr	r5, [r6, #4]
 800551c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800551e:	07d9      	lsls	r1, r3, #31
 8005520:	d405      	bmi.n	800552e <_vfiprintf_r+0x32>
 8005522:	89ab      	ldrh	r3, [r5, #12]
 8005524:	059a      	lsls	r2, r3, #22
 8005526:	d402      	bmi.n	800552e <_vfiprintf_r+0x32>
 8005528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800552a:	f7ff ff4b 	bl	80053c4 <__retarget_lock_acquire_recursive>
 800552e:	89ab      	ldrh	r3, [r5, #12]
 8005530:	071b      	lsls	r3, r3, #28
 8005532:	d501      	bpl.n	8005538 <_vfiprintf_r+0x3c>
 8005534:	692b      	ldr	r3, [r5, #16]
 8005536:	b9eb      	cbnz	r3, 8005574 <_vfiprintf_r+0x78>
 8005538:	4629      	mov	r1, r5
 800553a:	4630      	mov	r0, r6
 800553c:	f7ff fd1c 	bl	8004f78 <__swsetup_r>
 8005540:	b1c0      	cbz	r0, 8005574 <_vfiprintf_r+0x78>
 8005542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005544:	07dc      	lsls	r4, r3, #31
 8005546:	d50e      	bpl.n	8005566 <_vfiprintf_r+0x6a>
 8005548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800554c:	b01d      	add	sp, #116	; 0x74
 800554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005552:	4b7b      	ldr	r3, [pc, #492]	; (8005740 <_vfiprintf_r+0x244>)
 8005554:	429d      	cmp	r5, r3
 8005556:	d101      	bne.n	800555c <_vfiprintf_r+0x60>
 8005558:	68b5      	ldr	r5, [r6, #8]
 800555a:	e7df      	b.n	800551c <_vfiprintf_r+0x20>
 800555c:	4b79      	ldr	r3, [pc, #484]	; (8005744 <_vfiprintf_r+0x248>)
 800555e:	429d      	cmp	r5, r3
 8005560:	bf08      	it	eq
 8005562:	68f5      	ldreq	r5, [r6, #12]
 8005564:	e7da      	b.n	800551c <_vfiprintf_r+0x20>
 8005566:	89ab      	ldrh	r3, [r5, #12]
 8005568:	0598      	lsls	r0, r3, #22
 800556a:	d4ed      	bmi.n	8005548 <_vfiprintf_r+0x4c>
 800556c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800556e:	f7ff ff2a 	bl	80053c6 <__retarget_lock_release_recursive>
 8005572:	e7e9      	b.n	8005548 <_vfiprintf_r+0x4c>
 8005574:	2300      	movs	r3, #0
 8005576:	9309      	str	r3, [sp, #36]	; 0x24
 8005578:	2320      	movs	r3, #32
 800557a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800557e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005582:	2330      	movs	r3, #48	; 0x30
 8005584:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005748 <_vfiprintf_r+0x24c>
 8005588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800558c:	f04f 0901 	mov.w	r9, #1
 8005590:	4623      	mov	r3, r4
 8005592:	469a      	mov	sl, r3
 8005594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005598:	b10a      	cbz	r2, 800559e <_vfiprintf_r+0xa2>
 800559a:	2a25      	cmp	r2, #37	; 0x25
 800559c:	d1f9      	bne.n	8005592 <_vfiprintf_r+0x96>
 800559e:	ebba 0b04 	subs.w	fp, sl, r4
 80055a2:	d00b      	beq.n	80055bc <_vfiprintf_r+0xc0>
 80055a4:	465b      	mov	r3, fp
 80055a6:	4622      	mov	r2, r4
 80055a8:	4629      	mov	r1, r5
 80055aa:	4630      	mov	r0, r6
 80055ac:	f7ff ff93 	bl	80054d6 <__sfputs_r>
 80055b0:	3001      	adds	r0, #1
 80055b2:	f000 80aa 	beq.w	800570a <_vfiprintf_r+0x20e>
 80055b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055b8:	445a      	add	r2, fp
 80055ba:	9209      	str	r2, [sp, #36]	; 0x24
 80055bc:	f89a 3000 	ldrb.w	r3, [sl]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 80a2 	beq.w	800570a <_vfiprintf_r+0x20e>
 80055c6:	2300      	movs	r3, #0
 80055c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055d0:	f10a 0a01 	add.w	sl, sl, #1
 80055d4:	9304      	str	r3, [sp, #16]
 80055d6:	9307      	str	r3, [sp, #28]
 80055d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055dc:	931a      	str	r3, [sp, #104]	; 0x68
 80055de:	4654      	mov	r4, sl
 80055e0:	2205      	movs	r2, #5
 80055e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055e6:	4858      	ldr	r0, [pc, #352]	; (8005748 <_vfiprintf_r+0x24c>)
 80055e8:	f7fa fdf2 	bl	80001d0 <memchr>
 80055ec:	9a04      	ldr	r2, [sp, #16]
 80055ee:	b9d8      	cbnz	r0, 8005628 <_vfiprintf_r+0x12c>
 80055f0:	06d1      	lsls	r1, r2, #27
 80055f2:	bf44      	itt	mi
 80055f4:	2320      	movmi	r3, #32
 80055f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055fa:	0713      	lsls	r3, r2, #28
 80055fc:	bf44      	itt	mi
 80055fe:	232b      	movmi	r3, #43	; 0x2b
 8005600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005604:	f89a 3000 	ldrb.w	r3, [sl]
 8005608:	2b2a      	cmp	r3, #42	; 0x2a
 800560a:	d015      	beq.n	8005638 <_vfiprintf_r+0x13c>
 800560c:	9a07      	ldr	r2, [sp, #28]
 800560e:	4654      	mov	r4, sl
 8005610:	2000      	movs	r0, #0
 8005612:	f04f 0c0a 	mov.w	ip, #10
 8005616:	4621      	mov	r1, r4
 8005618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800561c:	3b30      	subs	r3, #48	; 0x30
 800561e:	2b09      	cmp	r3, #9
 8005620:	d94e      	bls.n	80056c0 <_vfiprintf_r+0x1c4>
 8005622:	b1b0      	cbz	r0, 8005652 <_vfiprintf_r+0x156>
 8005624:	9207      	str	r2, [sp, #28]
 8005626:	e014      	b.n	8005652 <_vfiprintf_r+0x156>
 8005628:	eba0 0308 	sub.w	r3, r0, r8
 800562c:	fa09 f303 	lsl.w	r3, r9, r3
 8005630:	4313      	orrs	r3, r2
 8005632:	9304      	str	r3, [sp, #16]
 8005634:	46a2      	mov	sl, r4
 8005636:	e7d2      	b.n	80055de <_vfiprintf_r+0xe2>
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	1d19      	adds	r1, r3, #4
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	9103      	str	r1, [sp, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	bfbb      	ittet	lt
 8005644:	425b      	neglt	r3, r3
 8005646:	f042 0202 	orrlt.w	r2, r2, #2
 800564a:	9307      	strge	r3, [sp, #28]
 800564c:	9307      	strlt	r3, [sp, #28]
 800564e:	bfb8      	it	lt
 8005650:	9204      	strlt	r2, [sp, #16]
 8005652:	7823      	ldrb	r3, [r4, #0]
 8005654:	2b2e      	cmp	r3, #46	; 0x2e
 8005656:	d10c      	bne.n	8005672 <_vfiprintf_r+0x176>
 8005658:	7863      	ldrb	r3, [r4, #1]
 800565a:	2b2a      	cmp	r3, #42	; 0x2a
 800565c:	d135      	bne.n	80056ca <_vfiprintf_r+0x1ce>
 800565e:	9b03      	ldr	r3, [sp, #12]
 8005660:	1d1a      	adds	r2, r3, #4
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	9203      	str	r2, [sp, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	bfb8      	it	lt
 800566a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800566e:	3402      	adds	r4, #2
 8005670:	9305      	str	r3, [sp, #20]
 8005672:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005758 <_vfiprintf_r+0x25c>
 8005676:	7821      	ldrb	r1, [r4, #0]
 8005678:	2203      	movs	r2, #3
 800567a:	4650      	mov	r0, sl
 800567c:	f7fa fda8 	bl	80001d0 <memchr>
 8005680:	b140      	cbz	r0, 8005694 <_vfiprintf_r+0x198>
 8005682:	2340      	movs	r3, #64	; 0x40
 8005684:	eba0 000a 	sub.w	r0, r0, sl
 8005688:	fa03 f000 	lsl.w	r0, r3, r0
 800568c:	9b04      	ldr	r3, [sp, #16]
 800568e:	4303      	orrs	r3, r0
 8005690:	3401      	adds	r4, #1
 8005692:	9304      	str	r3, [sp, #16]
 8005694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005698:	482c      	ldr	r0, [pc, #176]	; (800574c <_vfiprintf_r+0x250>)
 800569a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800569e:	2206      	movs	r2, #6
 80056a0:	f7fa fd96 	bl	80001d0 <memchr>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d03f      	beq.n	8005728 <_vfiprintf_r+0x22c>
 80056a8:	4b29      	ldr	r3, [pc, #164]	; (8005750 <_vfiprintf_r+0x254>)
 80056aa:	bb1b      	cbnz	r3, 80056f4 <_vfiprintf_r+0x1f8>
 80056ac:	9b03      	ldr	r3, [sp, #12]
 80056ae:	3307      	adds	r3, #7
 80056b0:	f023 0307 	bic.w	r3, r3, #7
 80056b4:	3308      	adds	r3, #8
 80056b6:	9303      	str	r3, [sp, #12]
 80056b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ba:	443b      	add	r3, r7
 80056bc:	9309      	str	r3, [sp, #36]	; 0x24
 80056be:	e767      	b.n	8005590 <_vfiprintf_r+0x94>
 80056c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80056c4:	460c      	mov	r4, r1
 80056c6:	2001      	movs	r0, #1
 80056c8:	e7a5      	b.n	8005616 <_vfiprintf_r+0x11a>
 80056ca:	2300      	movs	r3, #0
 80056cc:	3401      	adds	r4, #1
 80056ce:	9305      	str	r3, [sp, #20]
 80056d0:	4619      	mov	r1, r3
 80056d2:	f04f 0c0a 	mov.w	ip, #10
 80056d6:	4620      	mov	r0, r4
 80056d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056dc:	3a30      	subs	r2, #48	; 0x30
 80056de:	2a09      	cmp	r2, #9
 80056e0:	d903      	bls.n	80056ea <_vfiprintf_r+0x1ee>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0c5      	beq.n	8005672 <_vfiprintf_r+0x176>
 80056e6:	9105      	str	r1, [sp, #20]
 80056e8:	e7c3      	b.n	8005672 <_vfiprintf_r+0x176>
 80056ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80056ee:	4604      	mov	r4, r0
 80056f0:	2301      	movs	r3, #1
 80056f2:	e7f0      	b.n	80056d6 <_vfiprintf_r+0x1da>
 80056f4:	ab03      	add	r3, sp, #12
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	462a      	mov	r2, r5
 80056fa:	4b16      	ldr	r3, [pc, #88]	; (8005754 <_vfiprintf_r+0x258>)
 80056fc:	a904      	add	r1, sp, #16
 80056fe:	4630      	mov	r0, r6
 8005700:	f3af 8000 	nop.w
 8005704:	4607      	mov	r7, r0
 8005706:	1c78      	adds	r0, r7, #1
 8005708:	d1d6      	bne.n	80056b8 <_vfiprintf_r+0x1bc>
 800570a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800570c:	07d9      	lsls	r1, r3, #31
 800570e:	d405      	bmi.n	800571c <_vfiprintf_r+0x220>
 8005710:	89ab      	ldrh	r3, [r5, #12]
 8005712:	059a      	lsls	r2, r3, #22
 8005714:	d402      	bmi.n	800571c <_vfiprintf_r+0x220>
 8005716:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005718:	f7ff fe55 	bl	80053c6 <__retarget_lock_release_recursive>
 800571c:	89ab      	ldrh	r3, [r5, #12]
 800571e:	065b      	lsls	r3, r3, #25
 8005720:	f53f af12 	bmi.w	8005548 <_vfiprintf_r+0x4c>
 8005724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005726:	e711      	b.n	800554c <_vfiprintf_r+0x50>
 8005728:	ab03      	add	r3, sp, #12
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	462a      	mov	r2, r5
 800572e:	4b09      	ldr	r3, [pc, #36]	; (8005754 <_vfiprintf_r+0x258>)
 8005730:	a904      	add	r1, sp, #16
 8005732:	4630      	mov	r0, r6
 8005734:	f000 f880 	bl	8005838 <_printf_i>
 8005738:	e7e4      	b.n	8005704 <_vfiprintf_r+0x208>
 800573a:	bf00      	nop
 800573c:	08005cbc 	.word	0x08005cbc
 8005740:	08005cdc 	.word	0x08005cdc
 8005744:	08005c9c 	.word	0x08005c9c
 8005748:	08005cfc 	.word	0x08005cfc
 800574c:	08005d06 	.word	0x08005d06
 8005750:	00000000 	.word	0x00000000
 8005754:	080054d7 	.word	0x080054d7
 8005758:	08005d02 	.word	0x08005d02

0800575c <_printf_common>:
 800575c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005760:	4616      	mov	r6, r2
 8005762:	4699      	mov	r9, r3
 8005764:	688a      	ldr	r2, [r1, #8]
 8005766:	690b      	ldr	r3, [r1, #16]
 8005768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800576c:	4293      	cmp	r3, r2
 800576e:	bfb8      	it	lt
 8005770:	4613      	movlt	r3, r2
 8005772:	6033      	str	r3, [r6, #0]
 8005774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005778:	4607      	mov	r7, r0
 800577a:	460c      	mov	r4, r1
 800577c:	b10a      	cbz	r2, 8005782 <_printf_common+0x26>
 800577e:	3301      	adds	r3, #1
 8005780:	6033      	str	r3, [r6, #0]
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	0699      	lsls	r1, r3, #26
 8005786:	bf42      	ittt	mi
 8005788:	6833      	ldrmi	r3, [r6, #0]
 800578a:	3302      	addmi	r3, #2
 800578c:	6033      	strmi	r3, [r6, #0]
 800578e:	6825      	ldr	r5, [r4, #0]
 8005790:	f015 0506 	ands.w	r5, r5, #6
 8005794:	d106      	bne.n	80057a4 <_printf_common+0x48>
 8005796:	f104 0a19 	add.w	sl, r4, #25
 800579a:	68e3      	ldr	r3, [r4, #12]
 800579c:	6832      	ldr	r2, [r6, #0]
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	42ab      	cmp	r3, r5
 80057a2:	dc26      	bgt.n	80057f2 <_printf_common+0x96>
 80057a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057a8:	1e13      	subs	r3, r2, #0
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	bf18      	it	ne
 80057ae:	2301      	movne	r3, #1
 80057b0:	0692      	lsls	r2, r2, #26
 80057b2:	d42b      	bmi.n	800580c <_printf_common+0xb0>
 80057b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057b8:	4649      	mov	r1, r9
 80057ba:	4638      	mov	r0, r7
 80057bc:	47c0      	blx	r8
 80057be:	3001      	adds	r0, #1
 80057c0:	d01e      	beq.n	8005800 <_printf_common+0xa4>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	68e5      	ldr	r5, [r4, #12]
 80057c6:	6832      	ldr	r2, [r6, #0]
 80057c8:	f003 0306 	and.w	r3, r3, #6
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	bf08      	it	eq
 80057d0:	1aad      	subeq	r5, r5, r2
 80057d2:	68a3      	ldr	r3, [r4, #8]
 80057d4:	6922      	ldr	r2, [r4, #16]
 80057d6:	bf0c      	ite	eq
 80057d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057dc:	2500      	movne	r5, #0
 80057de:	4293      	cmp	r3, r2
 80057e0:	bfc4      	itt	gt
 80057e2:	1a9b      	subgt	r3, r3, r2
 80057e4:	18ed      	addgt	r5, r5, r3
 80057e6:	2600      	movs	r6, #0
 80057e8:	341a      	adds	r4, #26
 80057ea:	42b5      	cmp	r5, r6
 80057ec:	d11a      	bne.n	8005824 <_printf_common+0xc8>
 80057ee:	2000      	movs	r0, #0
 80057f0:	e008      	b.n	8005804 <_printf_common+0xa8>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4652      	mov	r2, sl
 80057f6:	4649      	mov	r1, r9
 80057f8:	4638      	mov	r0, r7
 80057fa:	47c0      	blx	r8
 80057fc:	3001      	adds	r0, #1
 80057fe:	d103      	bne.n	8005808 <_printf_common+0xac>
 8005800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005808:	3501      	adds	r5, #1
 800580a:	e7c6      	b.n	800579a <_printf_common+0x3e>
 800580c:	18e1      	adds	r1, r4, r3
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	2030      	movs	r0, #48	; 0x30
 8005812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005816:	4422      	add	r2, r4
 8005818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800581c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005820:	3302      	adds	r3, #2
 8005822:	e7c7      	b.n	80057b4 <_printf_common+0x58>
 8005824:	2301      	movs	r3, #1
 8005826:	4622      	mov	r2, r4
 8005828:	4649      	mov	r1, r9
 800582a:	4638      	mov	r0, r7
 800582c:	47c0      	blx	r8
 800582e:	3001      	adds	r0, #1
 8005830:	d0e6      	beq.n	8005800 <_printf_common+0xa4>
 8005832:	3601      	adds	r6, #1
 8005834:	e7d9      	b.n	80057ea <_printf_common+0x8e>
	...

08005838 <_printf_i>:
 8005838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800583c:	460c      	mov	r4, r1
 800583e:	4691      	mov	r9, r2
 8005840:	7e27      	ldrb	r7, [r4, #24]
 8005842:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005844:	2f78      	cmp	r7, #120	; 0x78
 8005846:	4680      	mov	r8, r0
 8005848:	469a      	mov	sl, r3
 800584a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800584e:	d807      	bhi.n	8005860 <_printf_i+0x28>
 8005850:	2f62      	cmp	r7, #98	; 0x62
 8005852:	d80a      	bhi.n	800586a <_printf_i+0x32>
 8005854:	2f00      	cmp	r7, #0
 8005856:	f000 80d8 	beq.w	8005a0a <_printf_i+0x1d2>
 800585a:	2f58      	cmp	r7, #88	; 0x58
 800585c:	f000 80a3 	beq.w	80059a6 <_printf_i+0x16e>
 8005860:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005868:	e03a      	b.n	80058e0 <_printf_i+0xa8>
 800586a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800586e:	2b15      	cmp	r3, #21
 8005870:	d8f6      	bhi.n	8005860 <_printf_i+0x28>
 8005872:	a001      	add	r0, pc, #4	; (adr r0, 8005878 <_printf_i+0x40>)
 8005874:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005878:	080058d1 	.word	0x080058d1
 800587c:	080058e5 	.word	0x080058e5
 8005880:	08005861 	.word	0x08005861
 8005884:	08005861 	.word	0x08005861
 8005888:	08005861 	.word	0x08005861
 800588c:	08005861 	.word	0x08005861
 8005890:	080058e5 	.word	0x080058e5
 8005894:	08005861 	.word	0x08005861
 8005898:	08005861 	.word	0x08005861
 800589c:	08005861 	.word	0x08005861
 80058a0:	08005861 	.word	0x08005861
 80058a4:	080059f1 	.word	0x080059f1
 80058a8:	08005915 	.word	0x08005915
 80058ac:	080059d3 	.word	0x080059d3
 80058b0:	08005861 	.word	0x08005861
 80058b4:	08005861 	.word	0x08005861
 80058b8:	08005a13 	.word	0x08005a13
 80058bc:	08005861 	.word	0x08005861
 80058c0:	08005915 	.word	0x08005915
 80058c4:	08005861 	.word	0x08005861
 80058c8:	08005861 	.word	0x08005861
 80058cc:	080059db 	.word	0x080059db
 80058d0:	680b      	ldr	r3, [r1, #0]
 80058d2:	1d1a      	adds	r2, r3, #4
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	600a      	str	r2, [r1, #0]
 80058d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0a3      	b.n	8005a2c <_printf_i+0x1f4>
 80058e4:	6825      	ldr	r5, [r4, #0]
 80058e6:	6808      	ldr	r0, [r1, #0]
 80058e8:	062e      	lsls	r6, r5, #24
 80058ea:	f100 0304 	add.w	r3, r0, #4
 80058ee:	d50a      	bpl.n	8005906 <_printf_i+0xce>
 80058f0:	6805      	ldr	r5, [r0, #0]
 80058f2:	600b      	str	r3, [r1, #0]
 80058f4:	2d00      	cmp	r5, #0
 80058f6:	da03      	bge.n	8005900 <_printf_i+0xc8>
 80058f8:	232d      	movs	r3, #45	; 0x2d
 80058fa:	426d      	negs	r5, r5
 80058fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005900:	485e      	ldr	r0, [pc, #376]	; (8005a7c <_printf_i+0x244>)
 8005902:	230a      	movs	r3, #10
 8005904:	e019      	b.n	800593a <_printf_i+0x102>
 8005906:	f015 0f40 	tst.w	r5, #64	; 0x40
 800590a:	6805      	ldr	r5, [r0, #0]
 800590c:	600b      	str	r3, [r1, #0]
 800590e:	bf18      	it	ne
 8005910:	b22d      	sxthne	r5, r5
 8005912:	e7ef      	b.n	80058f4 <_printf_i+0xbc>
 8005914:	680b      	ldr	r3, [r1, #0]
 8005916:	6825      	ldr	r5, [r4, #0]
 8005918:	1d18      	adds	r0, r3, #4
 800591a:	6008      	str	r0, [r1, #0]
 800591c:	0628      	lsls	r0, r5, #24
 800591e:	d501      	bpl.n	8005924 <_printf_i+0xec>
 8005920:	681d      	ldr	r5, [r3, #0]
 8005922:	e002      	b.n	800592a <_printf_i+0xf2>
 8005924:	0669      	lsls	r1, r5, #25
 8005926:	d5fb      	bpl.n	8005920 <_printf_i+0xe8>
 8005928:	881d      	ldrh	r5, [r3, #0]
 800592a:	4854      	ldr	r0, [pc, #336]	; (8005a7c <_printf_i+0x244>)
 800592c:	2f6f      	cmp	r7, #111	; 0x6f
 800592e:	bf0c      	ite	eq
 8005930:	2308      	moveq	r3, #8
 8005932:	230a      	movne	r3, #10
 8005934:	2100      	movs	r1, #0
 8005936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800593a:	6866      	ldr	r6, [r4, #4]
 800593c:	60a6      	str	r6, [r4, #8]
 800593e:	2e00      	cmp	r6, #0
 8005940:	bfa2      	ittt	ge
 8005942:	6821      	ldrge	r1, [r4, #0]
 8005944:	f021 0104 	bicge.w	r1, r1, #4
 8005948:	6021      	strge	r1, [r4, #0]
 800594a:	b90d      	cbnz	r5, 8005950 <_printf_i+0x118>
 800594c:	2e00      	cmp	r6, #0
 800594e:	d04d      	beq.n	80059ec <_printf_i+0x1b4>
 8005950:	4616      	mov	r6, r2
 8005952:	fbb5 f1f3 	udiv	r1, r5, r3
 8005956:	fb03 5711 	mls	r7, r3, r1, r5
 800595a:	5dc7      	ldrb	r7, [r0, r7]
 800595c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005960:	462f      	mov	r7, r5
 8005962:	42bb      	cmp	r3, r7
 8005964:	460d      	mov	r5, r1
 8005966:	d9f4      	bls.n	8005952 <_printf_i+0x11a>
 8005968:	2b08      	cmp	r3, #8
 800596a:	d10b      	bne.n	8005984 <_printf_i+0x14c>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	07df      	lsls	r7, r3, #31
 8005970:	d508      	bpl.n	8005984 <_printf_i+0x14c>
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	6861      	ldr	r1, [r4, #4]
 8005976:	4299      	cmp	r1, r3
 8005978:	bfde      	ittt	le
 800597a:	2330      	movle	r3, #48	; 0x30
 800597c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005980:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005984:	1b92      	subs	r2, r2, r6
 8005986:	6122      	str	r2, [r4, #16]
 8005988:	f8cd a000 	str.w	sl, [sp]
 800598c:	464b      	mov	r3, r9
 800598e:	aa03      	add	r2, sp, #12
 8005990:	4621      	mov	r1, r4
 8005992:	4640      	mov	r0, r8
 8005994:	f7ff fee2 	bl	800575c <_printf_common>
 8005998:	3001      	adds	r0, #1
 800599a:	d14c      	bne.n	8005a36 <_printf_i+0x1fe>
 800599c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059a0:	b004      	add	sp, #16
 80059a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a6:	4835      	ldr	r0, [pc, #212]	; (8005a7c <_printf_i+0x244>)
 80059a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	680e      	ldr	r6, [r1, #0]
 80059b0:	061f      	lsls	r7, r3, #24
 80059b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80059b6:	600e      	str	r6, [r1, #0]
 80059b8:	d514      	bpl.n	80059e4 <_printf_i+0x1ac>
 80059ba:	07d9      	lsls	r1, r3, #31
 80059bc:	bf44      	itt	mi
 80059be:	f043 0320 	orrmi.w	r3, r3, #32
 80059c2:	6023      	strmi	r3, [r4, #0]
 80059c4:	b91d      	cbnz	r5, 80059ce <_printf_i+0x196>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	f023 0320 	bic.w	r3, r3, #32
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	2310      	movs	r3, #16
 80059d0:	e7b0      	b.n	8005934 <_printf_i+0xfc>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	f043 0320 	orr.w	r3, r3, #32
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	2378      	movs	r3, #120	; 0x78
 80059dc:	4828      	ldr	r0, [pc, #160]	; (8005a80 <_printf_i+0x248>)
 80059de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059e2:	e7e3      	b.n	80059ac <_printf_i+0x174>
 80059e4:	065e      	lsls	r6, r3, #25
 80059e6:	bf48      	it	mi
 80059e8:	b2ad      	uxthmi	r5, r5
 80059ea:	e7e6      	b.n	80059ba <_printf_i+0x182>
 80059ec:	4616      	mov	r6, r2
 80059ee:	e7bb      	b.n	8005968 <_printf_i+0x130>
 80059f0:	680b      	ldr	r3, [r1, #0]
 80059f2:	6826      	ldr	r6, [r4, #0]
 80059f4:	6960      	ldr	r0, [r4, #20]
 80059f6:	1d1d      	adds	r5, r3, #4
 80059f8:	600d      	str	r5, [r1, #0]
 80059fa:	0635      	lsls	r5, r6, #24
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	d501      	bpl.n	8005a04 <_printf_i+0x1cc>
 8005a00:	6018      	str	r0, [r3, #0]
 8005a02:	e002      	b.n	8005a0a <_printf_i+0x1d2>
 8005a04:	0671      	lsls	r1, r6, #25
 8005a06:	d5fb      	bpl.n	8005a00 <_printf_i+0x1c8>
 8005a08:	8018      	strh	r0, [r3, #0]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	4616      	mov	r6, r2
 8005a10:	e7ba      	b.n	8005988 <_printf_i+0x150>
 8005a12:	680b      	ldr	r3, [r1, #0]
 8005a14:	1d1a      	adds	r2, r3, #4
 8005a16:	600a      	str	r2, [r1, #0]
 8005a18:	681e      	ldr	r6, [r3, #0]
 8005a1a:	6862      	ldr	r2, [r4, #4]
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f7fa fbd6 	bl	80001d0 <memchr>
 8005a24:	b108      	cbz	r0, 8005a2a <_printf_i+0x1f2>
 8005a26:	1b80      	subs	r0, r0, r6
 8005a28:	6060      	str	r0, [r4, #4]
 8005a2a:	6863      	ldr	r3, [r4, #4]
 8005a2c:	6123      	str	r3, [r4, #16]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a34:	e7a8      	b.n	8005988 <_printf_i+0x150>
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	4632      	mov	r2, r6
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	47d0      	blx	sl
 8005a40:	3001      	adds	r0, #1
 8005a42:	d0ab      	beq.n	800599c <_printf_i+0x164>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	079b      	lsls	r3, r3, #30
 8005a48:	d413      	bmi.n	8005a72 <_printf_i+0x23a>
 8005a4a:	68e0      	ldr	r0, [r4, #12]
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	4298      	cmp	r0, r3
 8005a50:	bfb8      	it	lt
 8005a52:	4618      	movlt	r0, r3
 8005a54:	e7a4      	b.n	80059a0 <_printf_i+0x168>
 8005a56:	2301      	movs	r3, #1
 8005a58:	4632      	mov	r2, r6
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	47d0      	blx	sl
 8005a60:	3001      	adds	r0, #1
 8005a62:	d09b      	beq.n	800599c <_printf_i+0x164>
 8005a64:	3501      	adds	r5, #1
 8005a66:	68e3      	ldr	r3, [r4, #12]
 8005a68:	9903      	ldr	r1, [sp, #12]
 8005a6a:	1a5b      	subs	r3, r3, r1
 8005a6c:	42ab      	cmp	r3, r5
 8005a6e:	dcf2      	bgt.n	8005a56 <_printf_i+0x21e>
 8005a70:	e7eb      	b.n	8005a4a <_printf_i+0x212>
 8005a72:	2500      	movs	r5, #0
 8005a74:	f104 0619 	add.w	r6, r4, #25
 8005a78:	e7f5      	b.n	8005a66 <_printf_i+0x22e>
 8005a7a:	bf00      	nop
 8005a7c:	08005d0d 	.word	0x08005d0d
 8005a80:	08005d1e 	.word	0x08005d1e

08005a84 <__sread>:
 8005a84:	b510      	push	{r4, lr}
 8005a86:	460c      	mov	r4, r1
 8005a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a8c:	f000 f894 	bl	8005bb8 <_read_r>
 8005a90:	2800      	cmp	r0, #0
 8005a92:	bfab      	itete	ge
 8005a94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a96:	89a3      	ldrhlt	r3, [r4, #12]
 8005a98:	181b      	addge	r3, r3, r0
 8005a9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a9e:	bfac      	ite	ge
 8005aa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005aa2:	81a3      	strhlt	r3, [r4, #12]
 8005aa4:	bd10      	pop	{r4, pc}

08005aa6 <__swrite>:
 8005aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aaa:	461f      	mov	r7, r3
 8005aac:	898b      	ldrh	r3, [r1, #12]
 8005aae:	05db      	lsls	r3, r3, #23
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	460c      	mov	r4, r1
 8005ab4:	4616      	mov	r6, r2
 8005ab6:	d505      	bpl.n	8005ac4 <__swrite+0x1e>
 8005ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005abc:	2302      	movs	r3, #2
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f000 f868 	bl	8005b94 <_lseek_r>
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	4632      	mov	r2, r6
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ada:	f000 b817 	b.w	8005b0c <_write_r>

08005ade <__sseek>:
 8005ade:	b510      	push	{r4, lr}
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae6:	f000 f855 	bl	8005b94 <_lseek_r>
 8005aea:	1c43      	adds	r3, r0, #1
 8005aec:	89a3      	ldrh	r3, [r4, #12]
 8005aee:	bf15      	itete	ne
 8005af0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005af2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005af6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005afa:	81a3      	strheq	r3, [r4, #12]
 8005afc:	bf18      	it	ne
 8005afe:	81a3      	strhne	r3, [r4, #12]
 8005b00:	bd10      	pop	{r4, pc}

08005b02 <__sclose>:
 8005b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b06:	f000 b813 	b.w	8005b30 <_close_r>
	...

08005b0c <_write_r>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	4d07      	ldr	r5, [pc, #28]	; (8005b2c <_write_r+0x20>)
 8005b10:	4604      	mov	r4, r0
 8005b12:	4608      	mov	r0, r1
 8005b14:	4611      	mov	r1, r2
 8005b16:	2200      	movs	r2, #0
 8005b18:	602a      	str	r2, [r5, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f7fb f86d 	bl	8000bfa <_write>
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	d102      	bne.n	8005b2a <_write_r+0x1e>
 8005b24:	682b      	ldr	r3, [r5, #0]
 8005b26:	b103      	cbz	r3, 8005b2a <_write_r+0x1e>
 8005b28:	6023      	str	r3, [r4, #0]
 8005b2a:	bd38      	pop	{r3, r4, r5, pc}
 8005b2c:	200002cc 	.word	0x200002cc

08005b30 <_close_r>:
 8005b30:	b538      	push	{r3, r4, r5, lr}
 8005b32:	4d06      	ldr	r5, [pc, #24]	; (8005b4c <_close_r+0x1c>)
 8005b34:	2300      	movs	r3, #0
 8005b36:	4604      	mov	r4, r0
 8005b38:	4608      	mov	r0, r1
 8005b3a:	602b      	str	r3, [r5, #0]
 8005b3c:	f7fb f879 	bl	8000c32 <_close>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_close_r+0x1a>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_close_r+0x1a>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	200002cc 	.word	0x200002cc

08005b50 <_fstat_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4d07      	ldr	r5, [pc, #28]	; (8005b70 <_fstat_r+0x20>)
 8005b54:	2300      	movs	r3, #0
 8005b56:	4604      	mov	r4, r0
 8005b58:	4608      	mov	r0, r1
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	602b      	str	r3, [r5, #0]
 8005b5e:	f7fb f874 	bl	8000c4a <_fstat>
 8005b62:	1c43      	adds	r3, r0, #1
 8005b64:	d102      	bne.n	8005b6c <_fstat_r+0x1c>
 8005b66:	682b      	ldr	r3, [r5, #0]
 8005b68:	b103      	cbz	r3, 8005b6c <_fstat_r+0x1c>
 8005b6a:	6023      	str	r3, [r4, #0]
 8005b6c:	bd38      	pop	{r3, r4, r5, pc}
 8005b6e:	bf00      	nop
 8005b70:	200002cc 	.word	0x200002cc

08005b74 <_isatty_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d06      	ldr	r5, [pc, #24]	; (8005b90 <_isatty_r+0x1c>)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	602b      	str	r3, [r5, #0]
 8005b80:	f7fb f873 	bl	8000c6a <_isatty>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d102      	bne.n	8005b8e <_isatty_r+0x1a>
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	b103      	cbz	r3, 8005b8e <_isatty_r+0x1a>
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	200002cc 	.word	0x200002cc

08005b94 <_lseek_r>:
 8005b94:	b538      	push	{r3, r4, r5, lr}
 8005b96:	4d07      	ldr	r5, [pc, #28]	; (8005bb4 <_lseek_r+0x20>)
 8005b98:	4604      	mov	r4, r0
 8005b9a:	4608      	mov	r0, r1
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	602a      	str	r2, [r5, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f7fb f86c 	bl	8000c80 <_lseek>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d102      	bne.n	8005bb2 <_lseek_r+0x1e>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	b103      	cbz	r3, 8005bb2 <_lseek_r+0x1e>
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	200002cc 	.word	0x200002cc

08005bb8 <_read_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4d07      	ldr	r5, [pc, #28]	; (8005bd8 <_read_r+0x20>)
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	4608      	mov	r0, r1
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	602a      	str	r2, [r5, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f7fa fffa 	bl	8000bc0 <_read>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_read_r+0x1e>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_read_r+0x1e>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	200002cc 	.word	0x200002cc

08005bdc <_init>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	bf00      	nop
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr

08005be8 <_fini>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	bf00      	nop
 8005bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bee:	bc08      	pop	{r3}
 8005bf0:	469e      	mov	lr, r3
 8005bf2:	4770      	bx	lr
